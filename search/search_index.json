{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u6b22\u8fce\u6765\u5230golang\u8fdb\u884c\u65f6 For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"\u6b22\u8fce\u6765\u5230golang\u8fdb\u884c\u65f6"},{"location":"#golang","text":"For full documentation visit mkdocs.org .","title":"\u6b22\u8fce\u6765\u5230golang\u8fdb\u884c\u65f6"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"about/","text":"\u5173\u4e8e\u6211 \u4e00\u4e2a\u70ed\u7231golang\u7684\u7a0b\u5e8f\u5458 \u8054\u7cfb\u65b9\u5f0f","title":"\u5173\u4e8e\u6211"},{"location":"about/#_1","text":"\u4e00\u4e2a\u70ed\u7231golang\u7684\u7a0b\u5e8f\u5458","title":"\u5173\u4e8e\u6211"},{"location":"about/#_2","text":"","title":"\u8054\u7cfb\u65b9\u5f0f"},{"location":"go\u77e5\u8bc6\u70b9/go-map/","text":"map\u6982\u5ff5 **Go**\u8bed\u8a00\u4e2d map \u662f\u4e00\u79cd\u7279\u6b8a\u7684\u6570\u636e\u7ed3\u6784\uff1a\u4e00\u79cd\u5143\u7d20\u5bf9( pair )\u7684\u65e0\u5e8f\u96c6\u5408\uff0c pair \u7684\u4e00\u4e2a\u5143\u7d20\u662f key \uff0c\u5bf9\u5e94\u7684\u53e6\u4e00\u4e2a\u5143\u7d20\u662f value \uff0c\u6240\u4ee5\u8fd9\u4e2a\u7ed3\u6784\u4e5f\u79f0\u4e3a\u5173\u8054\u6570\u7ec4\u6216\u5b57\u5178\u3002\u8fd9\u662f\u4e00\u79cd\u5feb\u901f\u5bfb\u627e\u503c\u7684\u7406\u60f3\u7ed3\u6784\uff1a\u7ed9\u5b9a key \uff0c\u5bf9\u5e94\u7684 value \u53ef\u4ee5\u8fc5\u901f\u5b9a\u4f4d\u3002 map \u8fd9\u79cd\u6570\u636e\u7ed3\u6784\u5728\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u4e2d\u4e5f\u79f0\u4e3a\u5b57\u5178(Python)\u3001 hash \u548c HashTable \u7b49\u3002 map\u58f0\u660e\u548c\u521d\u59cb\u5316 map \u662f\u5f15\u7528\u7c7b\u578b\uff0c\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u58f0\u660e\uff1a make ( map [ KeyType ] ValueType , initialCapacity ) make ( map [ KeyType ] ValueType ) map [ KeyType ] ValueType {} map [ KeyType ] ValueType { key1 : value1 , key2 : value2 , ... , keyN : valueN } \u672a\u521d\u59cb\u5316\u7684 map \u7684\u503c\u662f nil \u3002 \u7528 4 \u79cd\u65b9\u5f0f\u5206\u522b\u521b\u5efa\u6570\u7ec4\uff0c\u5176\u4e2d\u7b2c\u4e00\u79cd\u548c\u7b2c\u4e8c\u79cd\u7684\u533a\u522b\u5728\u4e8e\uff0c\u6709\u6ca1\u6709\u6307\u5b9a\u521d\u59cb\u5bb9\u91cf\uff0c\u4e0d\u8fc7\u4f7f\u7528\u7684\u65f6\u5019\u5219\u65e0\u9700\u5728\u610f\u8fd9\u4e9b\uff0c\u56e0\u4e3amap\u7684\u672c\u8d28\u51b3\u5b9a\u4e86\uff0c\u4e00\u65e6\u5bb9\u91cf\u4e0d\u591f\uff0c\u5b83\u4f1a\u81ea\u52a8\u6269\u5bb9\u3002\u793a\u4f8b\u4ee3\u7801\u5982\u4e0b: func test1 () { map1 := make ( map [ string ] string , 5 ) map2 := make ( map [ string ] string ) map3 := map [ string ] string {} map4 := map [ string ] string { a : 1 , b : 2 , c : 3 } fmt . Println ( map1 , map2 , map3 , map4 ) } \u6ce8\u610f \uff1a\u5fc5\u987b\u8981\u5148\u521d\u59cb\u5316\u624d\u80fd\u7ed9 map \u8d4b\u503c\u8bbe\u7f6e\u5143\u7d20\uff0c\u4e0d\u7136\u4f1a\u5f15\u8d77 panic: assign to entry in nil map \u3002 Map \u7684\u952e\u53ef\u4ee5\u662f\u4efb\u4f55\u503c\uff0c\u952e\u7684\u7c7b\u578b\u53ef\u4ee5\u662f\u5185\u7f6e\u7684\u7c7b\u578b\uff0c\u4e5f\u53ef\u4ee5\u662f\u7ed3\u6784\u7c7b\u578b\uff0c\u4f46\u662f\u4e0d\u7ba1\u600e\u4e48\u6837\uff0c\u8fd9\u4e2a\u952e\u53ef\u4ee5\u4f7f\u7528 == \u8fd0\u7b97\u7b26\u8fdb\u884c\u6bd4\u8f83\uff0c\u6240\u4ee5\u50cf\u5207\u7247\u3001\u51fd\u6570\u4ee5\u53ca\u542b\u6709\u5207\u7247\u7684\u7ed3\u6784\u7c7b\u578b\u5c31\u4e0d\u80fd\u7528\u4e8e Map \u7684\u952e\u4e86\uff0c\u56e0\u4e3a\u4ed6\u4eec\u5177\u6709\u5f15\u7528\u7684\u8bed\u4e49\uff0c\u4e0d\u53ef\u6bd4\u8f83\u3002 \u5bf9\u4e8e Map \u7684\u503c\u6765\u8bf4\uff0c\u5c31\u6ca1\u6709\u4ec0\u4e48\u9650\u5236\u4e86\uff0c\u5207\u7247\u8fd9\u79cd\u5728\u952e\u91cc\u4e0d\u80fd\u7528\u7684\uff0c\u5b8c\u5168\u53ef\u4ee5\u7528\u5728\u503c\u91cc\u3002 func main (){ ages01 := map [ string ] int { alice : 31 , bob : 13 , } ages02 := make ( map [ string ] int ) ages02 [ chris ] = 20 ages02 [ paul ] = 30 //age01\u548cage02\u4e24\u79cd\u521d\u59cb\u5316\u7684\u65b9\u5f0f\u7b49\u4ef7 m1 := make ( map [ string ] int ) m2 := map [ string ] int {} //m1\u548cm2\u521b\u5efa\u65b9\u5f0f\u7b49\u4ef7\uff0c\u90fd\u662f\u521b\u5efa\u4e86\u4e00\u4e2a\u7a7a\u7684\u7684map\uff0c\u8fd9\u4e2a\u65f6\u5019m1\u548cm2\u6ca1\u6709\u4efb\u4f55\u5143\u7d20 for name , age := range ages01 { fmt . Printf ( %s\\t%d\\n , name , age ) } for name , age := range ages02 { fmt . Printf ( %s\\t%d\\n , name , age ) } var null_map map [ string ] int //\u58f0\u660e\u4f46\u672a\u521d\u59cb\u5316map\uff0c\u6b64\u65f6\u662fmap\u7684\u96f6\u503c\u72b6\u6001\uff08\u53ea\u6709\u4e00\u4e2anil\u5143\u7d20\uff09 empty_map := map [ string ] int {} //\u521b\u5efa\u4e86\u521d\u59cb\u5316\u4e86\u4e00\u4e2a\u7a7a\u7684\u7684map\uff0c\u8fd9\u4e2a\u65f6\u5019empty_map\u6ca1\u6709\u4efb\u4f55\u5143\u7d20 fmt . Println ( m1 != nil m2 != nil ) //true fmt . Println ( len ( null_map ) == 0 ) fmt . Println ( null_map == nil ) //true,\u6b64\u65f6\u662fmap\u7684\u96f6\u503c\u72b6\u6001(nil) fmt . Println ( len ( empty_map ) == 0 ) fmt . Println ( empty_map == nil ) //false,\u7a7a\u7684\u7684map\u4e0d\u7b49\u4ef7\u4e8enil(map\u7684\u96f6\u503c\u72b6\u6001) empty_map [ test ] = 12 //\u6267\u884c\u6b63\u5e38\uff0c\u7a7a\u7684\u7684map\u53ef\u4ee5\u8d4b\u503c\u8bbe\u7f6e\u5143\u7d20 null_map [ test ] = 12 //panic: assignment to entry in nil map\uff0c\u65e0\u6cd5\u7ed9\u672a\u521d\u59cb\u5316\u7684map\u8d4b\u503c\u8bbe\u7f6e\u5143\u7d20 } map\u5143\u7d20\u904d\u5386 range for \u53ef\u7528\u4e8e\u904d\u5386 map \u4e2d\u6240\u6709\u7684\u5143\u7d20\uff0c\u4e0d\u8fc7\u9700\u8981\u6ce8\u610f\u56e0\u4e3a map \u672c\u8eab\u662f\u65e0\u5e8f\u7684\uff0c\u56e0\u6b64\u5bf9\u4e8e\u7a0b\u5e8f\u7684\u6bcf\u6b21\u6267\u884c\uff0c\u4e0d\u80fd\u4fdd\u8bc1\u4f7f\u7528 range for \u904d\u5386 map \u7684\u987a\u5e8f\u603b\u662f\u4e00\u81f4\u7684\u3002\u4f8b\u5982\uff1a func main () { personSalary := map [ string ] int { steve : 12000 , jamie : 15000 , } personSalary [ mike ] = 9000 fmt . Println ( All items of a map ) for key , value := range personSalary { fmt . Printf ( personSalary[%s] = %d\\n , key , value ) } } map\u5143\u7d20\u589e\u5220\u6539\u67e5 \u9996\u5148\u8fd9\u91cc map \u5143\u7d20\u7684\u589e\u52a0\u548c\u4fee\u6539\u5143\u7d20\u7684\u8bed\u6cd5\u4e00\u81f4\uff0c\u53ea\u9700\u8981 map[K]=V \u5373\u53ef\u3002\u4f8b\u5982\uff1a func main () { personSalary := make ( map [ string ] int ) personSalary [ steve ] = 12000 //\u589e\u52a0\u5143\u7d20 personSalary [ jamie ] = 15000 //\u589e\u52a0\u5143\u7d20 personSalary [ mike ] = 9000 //\u589e\u52a0\u5143\u7d20 fmt . Println ( map before change , personSalary ) personSalary [ mike ] = 10000 //\u4fee\u6539\u5143\u7d20 fmt . Println ( map after change , personSalary ) } //output /* map before change map[steve:12000 jamie:15000 mike:9000] map after change map[steve:12000 jamie:15000 mike:10000] */ \u5220\u9664\u5143\u7d20\u9700\u8981\u4f7f\u7528\u5185\u7f6e\u51fd\u6570 delete \uff0c\u8be5\u51fd\u6570\u6839\u636e\u952e\u6765\u5220\u9664\u4e00\u4e2a\u5143\u7d20\u3002\u9700\u8981\u5f3a\u8c03 delete \u51fd\u6570\u6ca1\u6709\u8fd4\u56de\u503c\uff0c delete \u51fd\u6570\u5220\u9664\u4e0d\u5b58\u5728\u7684\u952e\u4e5f\u662f\u53ef\u4ee5\u7684\uff0c\u53ea\u662f\u6ca1\u6709\u4efb\u4f55\u4f5c\u7528\u3002\u4f8b\u5982\uff1a func main () { personSalary := map [ string ] int { steve : 12000 , jamie : 15000 , } personSalary [ mike ] = 9000 fmt . Println ( map before deletion , personSalary ) delete ( personSalary , steve ) fmt . Println ( map after deletion , personSalary ) } //output /* map before deletion map[steve:12000 jamie:15000 mike:9000] map after deletion map[mike:9000 jamie:15000] */ \u67e5\u627e map \u4e2d\u67d0\u4e2a\u5143\u7d20\u9700\u8981\u7528\u4e0b\u9762\u7684\u4ee3\u7801\u6bb5\uff1a if _ , ok := map [ key ]; ok { //\u5982\u679c\u5b58\u5728\u5219\u6267\u884c } \u8fd9\u91cc\u9700\u8981\u5f3a\u8c03\u4e0b\uff0c\u6839\u636e\u952e\u503c\u7d22\u5f15\u67d0\u4e2a\u5143\u7d20\u65f6\uff0c\u4e5f\u4f1a\u8fd4\u56de\u4e24\u4e2a\u503c\uff1a\u7d22\u5f15\u5230\u7684\u503c\u548c\u672c\u6b21\u7d22\u5f15\u662f\u5426\u6210\u529f(\u8fd9\u91cc\u53ef\u80fd\u4f1a\u56e0\u4e3a\u7d22\u6570\u503c\u8d8a\u754c\u6216\u8005\u7d22\u5f15\u952e\u503c\u6709\u8bef\u800c\u5bfc\u81f4\u7d22\u5f15\u5931\u8d25)\u3002 \u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff1a func main (){ ages01 := map [ string ] int { alice : 31 , bob : 13 , } age , ok := ages01 [ bo ] //age\u624d\u662f\u6839\u636e\u952e\u503c\u7d22\u5f15\u5230\u7684\u503c if ! ok { fmt . Printf ( \u7d22\u5f15\u5931\u8d25\uff0cbo\u4e0d\u662fmap\u7684\u952e\u503c\uff0c\u6b64\u65f6age=%d , age ) //\u7d22\u5f15\u5931\u8d25\u4f1a\u8fd4\u56devalue\u7684\u96f6\u503c\uff0c\u8fd9\u91cc\u662fint\u7c7b\u578b\uff0c\u6240\u4ee5\u662f0 } else { fmt . Printf ( \u7d22\u5f15\u6210\u529f\uff0cage=%d , age ) } } map\u7684\u4e0d\u53ef\u6bd4\u6027 Go \u8bed\u8a00\u4e2d map \u548c slice \uff0c func \u4e00\u6837\uff0c\u4e0d\u652f\u6301 == \u64cd\u4f5c\u7b26\uff0c\u5c31\u662f\u4e0d\u80fd\u76f4\u63a5\u6bd4\u8f83\u3002\u552f\u4e00\u5408\u6cd5\u7684\u5c31\u662f\u548c nil \u4f5c\u6bd4\u8f83\uff0c\u5224\u65ad\u8be5 map \u662f\u4e0d\u662f\u96f6\u503c\u72b6\u6001\u3002 \u5982\u679c\u60f3\u81ea\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\uff0c\u6765\u6bd4\u8f83\u4e24\u4e2a map \u662f\u5426\u76f8\u7b49\uff0c\u5c31\u53ef\u4ee5\u904d\u5386\u6bd4\u8f83\u5b83\u4eec\u7684\u952e\u548c\u503c\u662f\u5426\u5b8c\u5168\u76f8\u7b49\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a func map_equal ( x , y map [ string ] string ) bool { if ( len ( x )) != len ( y ) { return false } for k , xv := range x { if yv , ok := y [ k ]; ! ok || yv != xv { return false } } return true } \u67e5\u627e\u952e\u503c \u68c0\u67e5\u4e00\u4e2a map \u4e2d\u662f\u5426\u6709\u67d0\u4e00\u4e2a key \uff0c\u4f7f\u7528\u4e00\u4e2a\u60ef\u7528\u7684\u5199\u6cd5\uff1a if v , ok := argsMap [ key1 ]; ok { fmt . Println ( key1: , v ) } argsMap[\"key1\"] \u8868\u8fbe\u5f0f\u591a\u91cd\u8fd4\u56de v \u662f value \u7684\u503c(\u5982\u679c key \u80fd\u591f\u627e\u5230)\uff0c\u5982\u679c\u5355\u7eaf\u5224\u65ad key \uff0c\u5e76\u4e0d\u9700\u8981 value \uff0c\u53ef\u4ee5\u7528\u5360\u4f4d\u7b26 _ \u5360\u4f4d ok \u662f bool \u7c7b\u578b\u503c\uff0c\u5982\u679c key \u80fd\u591f\u627e\u5230\uff0c\u5176\u4e3a true \uff0c\u5426\u5219\u662f false if \u8bed\u53e5\u901a\u8fc7 ok \u7684\u7ed3\u679c\u51b3\u5b9a\u662f\u5426\u8fdb\u5165\u82b1\u62ec\u53f7\u4e2d\u3002 \u591a\u7ef4map\u7684\u5751 \u5728\u81ea\u5df1\u7684\u9879\u76ee\u91cc\u7528\u5230\u4e86\u4e00\u4e2a\u4e8c\u7ef4 map \uff0c\u7ed3\u679c\u7b2c\u4e00\u904d\u5199\u7684\u65f6\u5019\u5c31\u78b0\u5230\u4e86\u90a3\u4e2a nil map \u7684\u95ee\u9898\u3002 \u4e00\u5f00\u59cb\u7684\u4ee3\u7801\u662f\u8fd9\u6837\u7684\uff1a m := make ( map [ string ] map [ string ] string ) m [ a ][ b ] = ccc \u540e\u6765\u624d\u60f3\u660e\u767d\u5982\u679c\u63d2\u65b0\u52a0\u5165\u7684\u5143\u7d20\u4e5f\u662f\u4e2a map \u7684\u8bdd\u9700\u8981\u518d\u6b21 make() !! \u4fee\u6b63\u540e\u7684\u4ee3\u7801\u5982\u4e0b m := make ( map [ string ] map [ string ] int ) c := make ( map [ string ] int ) c [ b ] = 1 m [ a ] = c \u8fd9\u65f6\u7684 m[\"a\"] \u7684\u503c\u5c31\u662f\u53e6\u4e00\u4e2a map \u4e86. \u591a\u7ef4\u5ea6 Map \u7684\u6570\u636e\u5b58\u53d6 \u4e00\u7ef4\u60c5\u51b5\u4e0b\u7684 map \u505a\u5b58\u53d6\u5f88\u7b80\u5355\uff0c\u800c\u4e8c\u7ef4\u4ee5\u4e0a\u7684\u60c5\u51b5\u5c31\u5f97\u5c0f\u5fc3\u4e86. \u5148\u6765\u770b\u4e00\u4e2a\u4f8b\u5b50\uff1a m := make ( map [ string ] map [ string ] int ) c := make ( map [ string ] int ) c [ b ] = 1 m [ a ] = c d := make ( map [ string ] int ) d [ c ] = 2 m [ a ] = d \u800c\u8fd9\u4e2a\u65f6\u5019\u518d\u53bb\u67e5\u8be2 m[\"a\"][\"b\"] \u4f1a\u53d1\u73b0\u8fd9\u4e2a\u503c\u5df2\u7ecf\u6ca1\u6709\u4e86\uff0c\u53d6\u800c\u4ee3\u4e4b\u7684\u662f m[\"a\"][\"c\"] . \u8fd9\u662f\u56e0\u4e3a b \u548c c \u90fd\u662f map[string]int \u7c7b\u578b\u7684\u6570\u636e\uff0c Golang \u76f4\u63a5\u628a [\"a\"] \u91cc\u7684\u6570\u636e\u4ece b \u66ff\u6362\u6210\u4e86 c \uff0c\u800c\u4e0d\u4f1a\u9012\u5f52\u5730\u6dfb\u52a0 map \u4e2d\u7f3a\u5931\u7684\u6570\u636e\u3002 \u8981\u5728 m \u4e2d\u4fdd\u7559 [\"a\"][\"b\"] \u548c [\"a\"][\"c\"] \uff0c\u9700\u8981\u4e00\u4e9b\u989d\u5916\u7684\u5224\u65ad\u624d\u884c\uff1a if _ , exist := m [ a ]; exist { m [ a ][ c ] = 2 } else { c := make ( map [ string ] int ) c [ c ] = 2 m [ a ] = c } \u6362\u53e5\u8bdd\u8bf4\uff0c\u6bcf\u6b21\u521b\u5efa\u4e00\u4e2a\u4e00\u7ef4 map \u90fd\u8981 make() \u4e00\u6b21\uff0c\u4e0d\u7136\u5c31\u4f1a panic . \u591a\u7ef4 map \u6ca1\u52a0\u4e00\u5c42\u90fd\u8981\u591a make() \u597d\u51e0\u6b21. map\u6392\u5e8f \u5982\u679c\u60f3\u6309\u987a\u5e8f\u904d\u5386\uff0c\u53ef\u4ee5\u5148\u5bf9 Map \u4e2d\u7684\u952e\u6392\u5e8f\uff0c\u7136\u540e\u904d\u5386\u6392\u5e8f\u597d\u7684\u952e\uff0c\u628a\u5bf9\u5e94\u7684\u503c\u53d6\u51fa\u6765\uff0c\u4e0b\u9762\u770b\u4e2a\u4f8b\u5b50\u5c31\u660e\u767d\u4e86\u3002 func main () { dict := map [ string ] int { \u738b\u4e94 : 60 , \u5f20\u4e09 : 43 } var names [] string for name := range dict { names = append ( names , name ) } sort . Strings ( names ) //\u6392\u5e8f for _ , key := range names { fmt . Println ( key , dict [ key ]) } } \u8fd9\u4e2a\u4f8b\u5b50\u91cc\u6709\u4e2a\u6280\u5de7\uff0c range \u4e00\u4e2a Map \u7684\u65f6\u5019\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u8fd4\u56de\u503c\uff0c\u8fd9\u4e2a\u9ed8\u8ba4\u7684\u8fd4\u56de\u503c\u5c31\u662fMap\u7684\u952e\u3002 map\u5e76\u53d1 \u54c8\u5e0c\u8868\u5728\u6709\u5e76\u53d1\u7684\u573a\u666f\u5e76\u4e0d\u5b89\u5168\uff1a\u540c\u65f6\u8bfb\u5199\u4e00\u4e2a\u54c8\u5e0c\u8868\u7684\u540e\u679c\u662f\u4e0d\u786e\u5b9a\u7684\u3002\u5982\u679c\u4f60\u9700\u8981\u4f7f\u7528 goroutines \u540c\u65f6\u5bf9\u4e00\u4e2a\u54c8\u5e0c\u8868\u505a\u8bfb\u5199\uff0c\u5bf9\u54c8\u5e0c\u8868\u7684\u8bbf\u95ee\u9700\u8981\u901a\u8fc7\u67d0\u79cd\u540c\u6b65\u673a\u5236\u505a\u534f\u8c03\u3002\u4e00\u4e2a\u5e38\u7528\u7684\u65b9\u6cd5\u662f\u662f\u4f7f\u7528 sync.RWMutex \u3002 \u8fd9\u4e2a\u8bed\u53e5\u58f0\u660e\u4e86\u4e00\u4e2a counter \u53d8\u91cf\uff0c\u8fd9\u662f\u4e00\u4e2a\u5305\u542b\u4e86\u4e00\u4e2amap\u548csync.RWMutex\u7684\u533f\u540d\u7ed3\u6784\u4f53\u3002 var counter = struct { sync . RWMutex m map [ string ] int }{ m : make ( map [ string ] int )} \u8bfb counter \u524d\uff0c\u83b7\u53d6\u8bfb\u9501\uff1a counter . RLock () n := counter . m [ some_key ] counter . RUnlock () fmt . Println ( some_key: , n ) \u5199counter\u524d\uff0c\u83b7\u53d6\u5199\u9501 counter . Lock () counter . m [ some_key ] ++ counter . Unlock () \u5bf9\u5e94\u4e0e**sync.Map**\u7684\u4f7f\u7528\u63a5\u53e3\u793a\u4f8b\uff1a package RegularIntMap type RegularIntMap struct { sync . RWMutex internal map [ int ] int } func NewRegularIntMap () * RegularIntMap { return RegularIntMap { internal : make ( map [ int ] int ), } } func ( rm * RegularIntMap ) Load ( key int ) ( value int , ok bool ) { rm . RLock () result , ok := rm . internal [ key ] rm . RUnlock () return result , ok } func ( rm * RegularIntMap ) Delete ( key int ) { rm . Lock () delete ( rm . internal , key ) rm . Unlock () } func ( rm * RegularIntMap ) Store ( key , value int ) { rm . Lock () rm . internal [ key ] = value rm . Unlock () } sync.Map\u4f7f\u7528 \u4ecego1.9\u5f00\u59cb\uff0csync.Map\u63d0\u4f9b\u7ed9\u5927\u5bb6\u4f7f\u7528\uff0c\u7ebf\u6027\u5b89\u5168\u7684map\u64cd\u4f5c\u3002 // \u8bf4\u660e\uff1a \u5b58\u50a8\u4e00\u4e2a\u8bbe\u7f6e\u7684\u952e\u503c\u3002 Store ( key , value interface {}) // \u8bf4\u660e\uff1a \u8fd4\u56de\u952e\u7684\u73b0\u6709\u503c(\u5982\u679c\u5b58\u5728)\uff0c\u5426\u5219\u5b58\u50a8\u5e76\u8fd4\u56de\u7ed9\u5b9a\u7684\u503c\uff0c\u5982\u679c\u662f\u8bfb\u53d6\u5219\u8fd4\u56detrue\uff0c\u5982\u679c\u662f\u5b58\u50a8\u8fd4\u56defalse\u3002 LoadOrStore ( key , value interface {}) ( actual interface {}, loaded bool ) // \u8bf4\u660e\uff1a \u8bfb\u53d6\u5b58\u50a8\u5728map\u4e2d\u7684\u503c\uff0c\u5982\u679c\u6ca1\u6709\u503c\uff0c\u5219\u8fd4\u56denil\u3002OK\u7684\u7ed3\u679c\u8868\u793a\u662f\u5426\u5728map\u4e2d\u627e\u5230\u503c\u3002 Load ( key interface {}) ( value interface {}, ok bool ) // \u8bf4\u660e\uff1a \u5220\u9664\u952e\u5bf9\u5e94\u7684\u503c\u3002 Delete ( key interface {}) // \u8bf4\u660e\uff1a \u5faa\u73af\u8bfb\u53d6map\u4e2d\u7684\u503c\u3002 Range ( f func ( key , value interface {}) bool ) \u56e0\u4e3a for ... range map \u662f\u5185\u5efa\u7684\u8bed\u8a00\u7279\u6027\uff0c\u6240\u4ee5\u6ca1\u6709\u529e\u6cd5\u4f7f\u7528 for range \u904d\u5386 sync.Map , \u4f46\u662f\u53ef\u4ee5\u4f7f\u7528\u5b83\u7684**Range**\u65b9\u6cd5\uff0c\u901a\u8fc7\u56de\u8c03\u7684\u65b9\u5f0f\u904d\u5386\u3002 \u793a\u4f8b\u4ee3\u7801\uff1a type userInfo struct { Name string Age int } var m sync . Map func main () { vv , ok := m . LoadOrStore ( 1 , one ) fmt . Println ( vv , ok ) //one false vv , ok = m . Load ( 1 ) fmt . Println ( vv , ok ) //one true vv , ok = m . LoadOrStore ( 1 , oneone ) fmt . Println ( vv , ok ) //one true vv , ok = m . Load ( 1 ) fmt . Println ( vv , ok ) //one true m . Store ( 1 , oneone ) vv , ok = m . Load ( 1 ) fmt . Println ( vv , ok ) // oneone true m . Store ( 2 , two ) m . Range ( func ( k , v interface {}) bool { fmt . Println ( k , v ) return true }) m . Delete ( 1 ) m . Range ( func ( k , v interface {}) bool { fmt . Println ( k , v ) return true }) map1 := make ( map [ string ] userInfo ) var user1 userInfo user1 . Name = ChamPly user1 . Age = 24 map1 [ user1 ] = user1 var user2 userInfo user2 . Name = Tom user2 . Age = 18 m . Store ( map_test , map1 ) mapValue , _ := m . Load ( map_test ) for k , v := range mapValue .( interface {}).( map [ string ] userInfo ) { fmt . Println ( k , v ) fmt . Println ( name: , v . Name ) } } \u6027\u80fd\u6d4b\u8bd5 \u4ee3\u7801\u7ed3\u6784\uff1a ~/coding/go/sync-map-analysis . \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 README.md \u251c\u2500\u2500 bench_test.go \u251c\u2500\u2500 main.go \u2514\u2500\u2500 regular.go regular.go package main import ( sync ) type RegularStringMap struct { sync . RWMutex internal map [ string ] string } func NewRegularStringMap () * RegularStringMap { return RegularStringMap { internal : make ( map [ string ] string ), } } func ( rm * RegularStringMap ) Load ( key string ) ( value string , ok bool ) { rm . RLock () result , ok := rm . internal [ key ] rm . RUnlock () return result , ok } func ( rm * RegularStringMap ) Delete ( key string ) { rm . Lock () delete ( rm . internal , key ) rm . Unlock () } func ( rm * RegularStringMap ) Store ( key , value string ) { rm . Lock () rm . internal [ key ] = value rm . Unlock () } type RegularIntMap struct { sync . RWMutex internal map [ int ] int } func NewRegularIntMap () * RegularIntMap { return RegularIntMap { internal : make ( map [ int ] int ), } } func ( rm * RegularIntMap ) Load ( key int ) ( value int , ok bool ) { rm . RLock () result , ok := rm . internal [ key ] rm . RUnlock () return result , ok } func ( rm * RegularIntMap ) Delete ( key int ) { rm . Lock () delete ( rm . internal , key ) rm . Unlock () } func ( rm * RegularIntMap ) Store ( key , value int ) { rm . Lock () rm . internal [ key ] = value rm . Unlock () } main.go package main import ( fmt sync ) func main () { regularMapUsage () syncMapUsage () } func regularMapUsage () { fmt . Println ( Regular threatsafe map test ) fmt . Println ( --------------------------- ) // Create the threadsafe map. reg := NewRegularStringMap () // Fetch an item that doesn t exist yet. result , ok := reg . Load ( hello ) if ok { fmt . Println ( result ) } else { fmt . Println ( value not found for key: `hello` ) } // Store an item in the map. reg . Store ( hello , world ) fmt . Println ( added value: `world` for key: `hello` ) // Fetch the item we just stored. result , ok = reg . Load ( hello ) if ok { fmt . Printf ( result: `%s` found for key: `hello`\\n , result ) } fmt . Println ( --------------------------- ) fmt . Println () fmt . Println () } func syncMapUsage () { fmt . Println ( sync.Map test (Go 1.9+ only) ) fmt . Println ( ---------------------------- ) // Create the threadsafe map. var sm sync . Map // Fetch an item that doesn t exist yet. result , ok := sm . Load ( hello ) if ok { fmt . Println ( result ) } else { fmt . Println ( value not found for key: `hello` ) } // Store an item in the map. sm . Store ( hello , world ) fmt . Println ( added value: `world` for key: `hello` ) // Fetch the item we just stored. result , ok = sm . Load ( hello ) if ok { fmt . Printf ( result: `%s` found for key: `hello`\\n , result .( string )) } fmt . Println ( --------------------------- ) } \u53c2\u8003\u6587\u732e go\u590d\u5408\u6570\u636e\u7ed3\u6784\u4e4bmap map \u67e5 map\u5e76\u53d1 sync.Map Golang\u4e4bv1.9\u4e2d\u7ebf\u7a0b\u5b89\u5168\u7684sync.Map sync.Map \u4e0e map RWMutex \u6027\u80fd\u6d4b\u8bd5\u793a\u4f8b\u4ee3\u7801 github","title":"go-map"},{"location":"go\u77e5\u8bc6\u70b9/go-map/#map","text":"**Go**\u8bed\u8a00\u4e2d map \u662f\u4e00\u79cd\u7279\u6b8a\u7684\u6570\u636e\u7ed3\u6784\uff1a\u4e00\u79cd\u5143\u7d20\u5bf9( pair )\u7684\u65e0\u5e8f\u96c6\u5408\uff0c pair \u7684\u4e00\u4e2a\u5143\u7d20\u662f key \uff0c\u5bf9\u5e94\u7684\u53e6\u4e00\u4e2a\u5143\u7d20\u662f value \uff0c\u6240\u4ee5\u8fd9\u4e2a\u7ed3\u6784\u4e5f\u79f0\u4e3a\u5173\u8054\u6570\u7ec4\u6216\u5b57\u5178\u3002\u8fd9\u662f\u4e00\u79cd\u5feb\u901f\u5bfb\u627e\u503c\u7684\u7406\u60f3\u7ed3\u6784\uff1a\u7ed9\u5b9a key \uff0c\u5bf9\u5e94\u7684 value \u53ef\u4ee5\u8fc5\u901f\u5b9a\u4f4d\u3002 map \u8fd9\u79cd\u6570\u636e\u7ed3\u6784\u5728\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u4e2d\u4e5f\u79f0\u4e3a\u5b57\u5178(Python)\u3001 hash \u548c HashTable \u7b49\u3002","title":"map\u6982\u5ff5"},{"location":"go\u77e5\u8bc6\u70b9/go-map/#map_1","text":"map \u662f\u5f15\u7528\u7c7b\u578b\uff0c\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u58f0\u660e\uff1a make ( map [ KeyType ] ValueType , initialCapacity ) make ( map [ KeyType ] ValueType ) map [ KeyType ] ValueType {} map [ KeyType ] ValueType { key1 : value1 , key2 : value2 , ... , keyN : valueN } \u672a\u521d\u59cb\u5316\u7684 map \u7684\u503c\u662f nil \u3002 \u7528 4 \u79cd\u65b9\u5f0f\u5206\u522b\u521b\u5efa\u6570\u7ec4\uff0c\u5176\u4e2d\u7b2c\u4e00\u79cd\u548c\u7b2c\u4e8c\u79cd\u7684\u533a\u522b\u5728\u4e8e\uff0c\u6709\u6ca1\u6709\u6307\u5b9a\u521d\u59cb\u5bb9\u91cf\uff0c\u4e0d\u8fc7\u4f7f\u7528\u7684\u65f6\u5019\u5219\u65e0\u9700\u5728\u610f\u8fd9\u4e9b\uff0c\u56e0\u4e3amap\u7684\u672c\u8d28\u51b3\u5b9a\u4e86\uff0c\u4e00\u65e6\u5bb9\u91cf\u4e0d\u591f\uff0c\u5b83\u4f1a\u81ea\u52a8\u6269\u5bb9\u3002\u793a\u4f8b\u4ee3\u7801\u5982\u4e0b: func test1 () { map1 := make ( map [ string ] string , 5 ) map2 := make ( map [ string ] string ) map3 := map [ string ] string {} map4 := map [ string ] string { a : 1 , b : 2 , c : 3 } fmt . Println ( map1 , map2 , map3 , map4 ) } \u6ce8\u610f \uff1a\u5fc5\u987b\u8981\u5148\u521d\u59cb\u5316\u624d\u80fd\u7ed9 map \u8d4b\u503c\u8bbe\u7f6e\u5143\u7d20\uff0c\u4e0d\u7136\u4f1a\u5f15\u8d77 panic: assign to entry in nil map \u3002 Map \u7684\u952e\u53ef\u4ee5\u662f\u4efb\u4f55\u503c\uff0c\u952e\u7684\u7c7b\u578b\u53ef\u4ee5\u662f\u5185\u7f6e\u7684\u7c7b\u578b\uff0c\u4e5f\u53ef\u4ee5\u662f\u7ed3\u6784\u7c7b\u578b\uff0c\u4f46\u662f\u4e0d\u7ba1\u600e\u4e48\u6837\uff0c\u8fd9\u4e2a\u952e\u53ef\u4ee5\u4f7f\u7528 == \u8fd0\u7b97\u7b26\u8fdb\u884c\u6bd4\u8f83\uff0c\u6240\u4ee5\u50cf\u5207\u7247\u3001\u51fd\u6570\u4ee5\u53ca\u542b\u6709\u5207\u7247\u7684\u7ed3\u6784\u7c7b\u578b\u5c31\u4e0d\u80fd\u7528\u4e8e Map \u7684\u952e\u4e86\uff0c\u56e0\u4e3a\u4ed6\u4eec\u5177\u6709\u5f15\u7528\u7684\u8bed\u4e49\uff0c\u4e0d\u53ef\u6bd4\u8f83\u3002 \u5bf9\u4e8e Map \u7684\u503c\u6765\u8bf4\uff0c\u5c31\u6ca1\u6709\u4ec0\u4e48\u9650\u5236\u4e86\uff0c\u5207\u7247\u8fd9\u79cd\u5728\u952e\u91cc\u4e0d\u80fd\u7528\u7684\uff0c\u5b8c\u5168\u53ef\u4ee5\u7528\u5728\u503c\u91cc\u3002 func main (){ ages01 := map [ string ] int { alice : 31 , bob : 13 , } ages02 := make ( map [ string ] int ) ages02 [ chris ] = 20 ages02 [ paul ] = 30 //age01\u548cage02\u4e24\u79cd\u521d\u59cb\u5316\u7684\u65b9\u5f0f\u7b49\u4ef7 m1 := make ( map [ string ] int ) m2 := map [ string ] int {} //m1\u548cm2\u521b\u5efa\u65b9\u5f0f\u7b49\u4ef7\uff0c\u90fd\u662f\u521b\u5efa\u4e86\u4e00\u4e2a\u7a7a\u7684\u7684map\uff0c\u8fd9\u4e2a\u65f6\u5019m1\u548cm2\u6ca1\u6709\u4efb\u4f55\u5143\u7d20 for name , age := range ages01 { fmt . Printf ( %s\\t%d\\n , name , age ) } for name , age := range ages02 { fmt . Printf ( %s\\t%d\\n , name , age ) } var null_map map [ string ] int //\u58f0\u660e\u4f46\u672a\u521d\u59cb\u5316map\uff0c\u6b64\u65f6\u662fmap\u7684\u96f6\u503c\u72b6\u6001\uff08\u53ea\u6709\u4e00\u4e2anil\u5143\u7d20\uff09 empty_map := map [ string ] int {} //\u521b\u5efa\u4e86\u521d\u59cb\u5316\u4e86\u4e00\u4e2a\u7a7a\u7684\u7684map\uff0c\u8fd9\u4e2a\u65f6\u5019empty_map\u6ca1\u6709\u4efb\u4f55\u5143\u7d20 fmt . Println ( m1 != nil m2 != nil ) //true fmt . Println ( len ( null_map ) == 0 ) fmt . Println ( null_map == nil ) //true,\u6b64\u65f6\u662fmap\u7684\u96f6\u503c\u72b6\u6001(nil) fmt . Println ( len ( empty_map ) == 0 ) fmt . Println ( empty_map == nil ) //false,\u7a7a\u7684\u7684map\u4e0d\u7b49\u4ef7\u4e8enil(map\u7684\u96f6\u503c\u72b6\u6001) empty_map [ test ] = 12 //\u6267\u884c\u6b63\u5e38\uff0c\u7a7a\u7684\u7684map\u53ef\u4ee5\u8d4b\u503c\u8bbe\u7f6e\u5143\u7d20 null_map [ test ] = 12 //panic: assignment to entry in nil map\uff0c\u65e0\u6cd5\u7ed9\u672a\u521d\u59cb\u5316\u7684map\u8d4b\u503c\u8bbe\u7f6e\u5143\u7d20 }","title":"map\u58f0\u660e\u548c\u521d\u59cb\u5316"},{"location":"go\u77e5\u8bc6\u70b9/go-map/#map_2","text":"range for \u53ef\u7528\u4e8e\u904d\u5386 map \u4e2d\u6240\u6709\u7684\u5143\u7d20\uff0c\u4e0d\u8fc7\u9700\u8981\u6ce8\u610f\u56e0\u4e3a map \u672c\u8eab\u662f\u65e0\u5e8f\u7684\uff0c\u56e0\u6b64\u5bf9\u4e8e\u7a0b\u5e8f\u7684\u6bcf\u6b21\u6267\u884c\uff0c\u4e0d\u80fd\u4fdd\u8bc1\u4f7f\u7528 range for \u904d\u5386 map \u7684\u987a\u5e8f\u603b\u662f\u4e00\u81f4\u7684\u3002\u4f8b\u5982\uff1a func main () { personSalary := map [ string ] int { steve : 12000 , jamie : 15000 , } personSalary [ mike ] = 9000 fmt . Println ( All items of a map ) for key , value := range personSalary { fmt . Printf ( personSalary[%s] = %d\\n , key , value ) } }","title":"map\u5143\u7d20\u904d\u5386"},{"location":"go\u77e5\u8bc6\u70b9/go-map/#map_3","text":"\u9996\u5148\u8fd9\u91cc map \u5143\u7d20\u7684\u589e\u52a0\u548c\u4fee\u6539\u5143\u7d20\u7684\u8bed\u6cd5\u4e00\u81f4\uff0c\u53ea\u9700\u8981 map[K]=V \u5373\u53ef\u3002\u4f8b\u5982\uff1a func main () { personSalary := make ( map [ string ] int ) personSalary [ steve ] = 12000 //\u589e\u52a0\u5143\u7d20 personSalary [ jamie ] = 15000 //\u589e\u52a0\u5143\u7d20 personSalary [ mike ] = 9000 //\u589e\u52a0\u5143\u7d20 fmt . Println ( map before change , personSalary ) personSalary [ mike ] = 10000 //\u4fee\u6539\u5143\u7d20 fmt . Println ( map after change , personSalary ) } //output /* map before change map[steve:12000 jamie:15000 mike:9000] map after change map[steve:12000 jamie:15000 mike:10000] */ \u5220\u9664\u5143\u7d20\u9700\u8981\u4f7f\u7528\u5185\u7f6e\u51fd\u6570 delete \uff0c\u8be5\u51fd\u6570\u6839\u636e\u952e\u6765\u5220\u9664\u4e00\u4e2a\u5143\u7d20\u3002\u9700\u8981\u5f3a\u8c03 delete \u51fd\u6570\u6ca1\u6709\u8fd4\u56de\u503c\uff0c delete \u51fd\u6570\u5220\u9664\u4e0d\u5b58\u5728\u7684\u952e\u4e5f\u662f\u53ef\u4ee5\u7684\uff0c\u53ea\u662f\u6ca1\u6709\u4efb\u4f55\u4f5c\u7528\u3002\u4f8b\u5982\uff1a func main () { personSalary := map [ string ] int { steve : 12000 , jamie : 15000 , } personSalary [ mike ] = 9000 fmt . Println ( map before deletion , personSalary ) delete ( personSalary , steve ) fmt . Println ( map after deletion , personSalary ) } //output /* map before deletion map[steve:12000 jamie:15000 mike:9000] map after deletion map[mike:9000 jamie:15000] */ \u67e5\u627e map \u4e2d\u67d0\u4e2a\u5143\u7d20\u9700\u8981\u7528\u4e0b\u9762\u7684\u4ee3\u7801\u6bb5\uff1a if _ , ok := map [ key ]; ok { //\u5982\u679c\u5b58\u5728\u5219\u6267\u884c } \u8fd9\u91cc\u9700\u8981\u5f3a\u8c03\u4e0b\uff0c\u6839\u636e\u952e\u503c\u7d22\u5f15\u67d0\u4e2a\u5143\u7d20\u65f6\uff0c\u4e5f\u4f1a\u8fd4\u56de\u4e24\u4e2a\u503c\uff1a\u7d22\u5f15\u5230\u7684\u503c\u548c\u672c\u6b21\u7d22\u5f15\u662f\u5426\u6210\u529f(\u8fd9\u91cc\u53ef\u80fd\u4f1a\u56e0\u4e3a\u7d22\u6570\u503c\u8d8a\u754c\u6216\u8005\u7d22\u5f15\u952e\u503c\u6709\u8bef\u800c\u5bfc\u81f4\u7d22\u5f15\u5931\u8d25)\u3002 \u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff1a func main (){ ages01 := map [ string ] int { alice : 31 , bob : 13 , } age , ok := ages01 [ bo ] //age\u624d\u662f\u6839\u636e\u952e\u503c\u7d22\u5f15\u5230\u7684\u503c if ! ok { fmt . Printf ( \u7d22\u5f15\u5931\u8d25\uff0cbo\u4e0d\u662fmap\u7684\u952e\u503c\uff0c\u6b64\u65f6age=%d , age ) //\u7d22\u5f15\u5931\u8d25\u4f1a\u8fd4\u56devalue\u7684\u96f6\u503c\uff0c\u8fd9\u91cc\u662fint\u7c7b\u578b\uff0c\u6240\u4ee5\u662f0 } else { fmt . Printf ( \u7d22\u5f15\u6210\u529f\uff0cage=%d , age ) } }","title":"map\u5143\u7d20\u589e\u5220\u6539\u67e5"},{"location":"go\u77e5\u8bc6\u70b9/go-map/#map_4","text":"Go \u8bed\u8a00\u4e2d map \u548c slice \uff0c func \u4e00\u6837\uff0c\u4e0d\u652f\u6301 == \u64cd\u4f5c\u7b26\uff0c\u5c31\u662f\u4e0d\u80fd\u76f4\u63a5\u6bd4\u8f83\u3002\u552f\u4e00\u5408\u6cd5\u7684\u5c31\u662f\u548c nil \u4f5c\u6bd4\u8f83\uff0c\u5224\u65ad\u8be5 map \u662f\u4e0d\u662f\u96f6\u503c\u72b6\u6001\u3002 \u5982\u679c\u60f3\u81ea\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\uff0c\u6765\u6bd4\u8f83\u4e24\u4e2a map \u662f\u5426\u76f8\u7b49\uff0c\u5c31\u53ef\u4ee5\u904d\u5386\u6bd4\u8f83\u5b83\u4eec\u7684\u952e\u548c\u503c\u662f\u5426\u5b8c\u5168\u76f8\u7b49\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a func map_equal ( x , y map [ string ] string ) bool { if ( len ( x )) != len ( y ) { return false } for k , xv := range x { if yv , ok := y [ k ]; ! ok || yv != xv { return false } } return true }","title":"map\u7684\u4e0d\u53ef\u6bd4\u6027"},{"location":"go\u77e5\u8bc6\u70b9/go-map/#_1","text":"\u68c0\u67e5\u4e00\u4e2a map \u4e2d\u662f\u5426\u6709\u67d0\u4e00\u4e2a key \uff0c\u4f7f\u7528\u4e00\u4e2a\u60ef\u7528\u7684\u5199\u6cd5\uff1a if v , ok := argsMap [ key1 ]; ok { fmt . Println ( key1: , v ) } argsMap[\"key1\"] \u8868\u8fbe\u5f0f\u591a\u91cd\u8fd4\u56de v \u662f value \u7684\u503c(\u5982\u679c key \u80fd\u591f\u627e\u5230)\uff0c\u5982\u679c\u5355\u7eaf\u5224\u65ad key \uff0c\u5e76\u4e0d\u9700\u8981 value \uff0c\u53ef\u4ee5\u7528\u5360\u4f4d\u7b26 _ \u5360\u4f4d ok \u662f bool \u7c7b\u578b\u503c\uff0c\u5982\u679c key \u80fd\u591f\u627e\u5230\uff0c\u5176\u4e3a true \uff0c\u5426\u5219\u662f false if \u8bed\u53e5\u901a\u8fc7 ok \u7684\u7ed3\u679c\u51b3\u5b9a\u662f\u5426\u8fdb\u5165\u82b1\u62ec\u53f7\u4e2d\u3002","title":"\u67e5\u627e\u952e\u503c"},{"location":"go\u77e5\u8bc6\u70b9/go-map/#map_5","text":"\u5728\u81ea\u5df1\u7684\u9879\u76ee\u91cc\u7528\u5230\u4e86\u4e00\u4e2a\u4e8c\u7ef4 map \uff0c\u7ed3\u679c\u7b2c\u4e00\u904d\u5199\u7684\u65f6\u5019\u5c31\u78b0\u5230\u4e86\u90a3\u4e2a nil map \u7684\u95ee\u9898\u3002 \u4e00\u5f00\u59cb\u7684\u4ee3\u7801\u662f\u8fd9\u6837\u7684\uff1a m := make ( map [ string ] map [ string ] string ) m [ a ][ b ] = ccc \u540e\u6765\u624d\u60f3\u660e\u767d\u5982\u679c\u63d2\u65b0\u52a0\u5165\u7684\u5143\u7d20\u4e5f\u662f\u4e2a map \u7684\u8bdd\u9700\u8981\u518d\u6b21 make() !! \u4fee\u6b63\u540e\u7684\u4ee3\u7801\u5982\u4e0b m := make ( map [ string ] map [ string ] int ) c := make ( map [ string ] int ) c [ b ] = 1 m [ a ] = c \u8fd9\u65f6\u7684 m[\"a\"] \u7684\u503c\u5c31\u662f\u53e6\u4e00\u4e2a map \u4e86. \u591a\u7ef4\u5ea6 Map \u7684\u6570\u636e\u5b58\u53d6 \u4e00\u7ef4\u60c5\u51b5\u4e0b\u7684 map \u505a\u5b58\u53d6\u5f88\u7b80\u5355\uff0c\u800c\u4e8c\u7ef4\u4ee5\u4e0a\u7684\u60c5\u51b5\u5c31\u5f97\u5c0f\u5fc3\u4e86. \u5148\u6765\u770b\u4e00\u4e2a\u4f8b\u5b50\uff1a m := make ( map [ string ] map [ string ] int ) c := make ( map [ string ] int ) c [ b ] = 1 m [ a ] = c d := make ( map [ string ] int ) d [ c ] = 2 m [ a ] = d \u800c\u8fd9\u4e2a\u65f6\u5019\u518d\u53bb\u67e5\u8be2 m[\"a\"][\"b\"] \u4f1a\u53d1\u73b0\u8fd9\u4e2a\u503c\u5df2\u7ecf\u6ca1\u6709\u4e86\uff0c\u53d6\u800c\u4ee3\u4e4b\u7684\u662f m[\"a\"][\"c\"] . \u8fd9\u662f\u56e0\u4e3a b \u548c c \u90fd\u662f map[string]int \u7c7b\u578b\u7684\u6570\u636e\uff0c Golang \u76f4\u63a5\u628a [\"a\"] \u91cc\u7684\u6570\u636e\u4ece b \u66ff\u6362\u6210\u4e86 c \uff0c\u800c\u4e0d\u4f1a\u9012\u5f52\u5730\u6dfb\u52a0 map \u4e2d\u7f3a\u5931\u7684\u6570\u636e\u3002 \u8981\u5728 m \u4e2d\u4fdd\u7559 [\"a\"][\"b\"] \u548c [\"a\"][\"c\"] \uff0c\u9700\u8981\u4e00\u4e9b\u989d\u5916\u7684\u5224\u65ad\u624d\u884c\uff1a if _ , exist := m [ a ]; exist { m [ a ][ c ] = 2 } else { c := make ( map [ string ] int ) c [ c ] = 2 m [ a ] = c } \u6362\u53e5\u8bdd\u8bf4\uff0c\u6bcf\u6b21\u521b\u5efa\u4e00\u4e2a\u4e00\u7ef4 map \u90fd\u8981 make() \u4e00\u6b21\uff0c\u4e0d\u7136\u5c31\u4f1a panic . \u591a\u7ef4 map \u6ca1\u52a0\u4e00\u5c42\u90fd\u8981\u591a make() \u597d\u51e0\u6b21.","title":"\u591a\u7ef4map\u7684\u5751"},{"location":"go\u77e5\u8bc6\u70b9/go-map/#map_6","text":"\u5982\u679c\u60f3\u6309\u987a\u5e8f\u904d\u5386\uff0c\u53ef\u4ee5\u5148\u5bf9 Map \u4e2d\u7684\u952e\u6392\u5e8f\uff0c\u7136\u540e\u904d\u5386\u6392\u5e8f\u597d\u7684\u952e\uff0c\u628a\u5bf9\u5e94\u7684\u503c\u53d6\u51fa\u6765\uff0c\u4e0b\u9762\u770b\u4e2a\u4f8b\u5b50\u5c31\u660e\u767d\u4e86\u3002 func main () { dict := map [ string ] int { \u738b\u4e94 : 60 , \u5f20\u4e09 : 43 } var names [] string for name := range dict { names = append ( names , name ) } sort . Strings ( names ) //\u6392\u5e8f for _ , key := range names { fmt . Println ( key , dict [ key ]) } } \u8fd9\u4e2a\u4f8b\u5b50\u91cc\u6709\u4e2a\u6280\u5de7\uff0c range \u4e00\u4e2a Map \u7684\u65f6\u5019\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u8fd4\u56de\u503c\uff0c\u8fd9\u4e2a\u9ed8\u8ba4\u7684\u8fd4\u56de\u503c\u5c31\u662fMap\u7684\u952e\u3002","title":"map\u6392\u5e8f"},{"location":"go\u77e5\u8bc6\u70b9/go-map/#map_7","text":"\u54c8\u5e0c\u8868\u5728\u6709\u5e76\u53d1\u7684\u573a\u666f\u5e76\u4e0d\u5b89\u5168\uff1a\u540c\u65f6\u8bfb\u5199\u4e00\u4e2a\u54c8\u5e0c\u8868\u7684\u540e\u679c\u662f\u4e0d\u786e\u5b9a\u7684\u3002\u5982\u679c\u4f60\u9700\u8981\u4f7f\u7528 goroutines \u540c\u65f6\u5bf9\u4e00\u4e2a\u54c8\u5e0c\u8868\u505a\u8bfb\u5199\uff0c\u5bf9\u54c8\u5e0c\u8868\u7684\u8bbf\u95ee\u9700\u8981\u901a\u8fc7\u67d0\u79cd\u540c\u6b65\u673a\u5236\u505a\u534f\u8c03\u3002\u4e00\u4e2a\u5e38\u7528\u7684\u65b9\u6cd5\u662f\u662f\u4f7f\u7528 sync.RWMutex \u3002 \u8fd9\u4e2a\u8bed\u53e5\u58f0\u660e\u4e86\u4e00\u4e2a counter \u53d8\u91cf\uff0c\u8fd9\u662f\u4e00\u4e2a\u5305\u542b\u4e86\u4e00\u4e2amap\u548csync.RWMutex\u7684\u533f\u540d\u7ed3\u6784\u4f53\u3002 var counter = struct { sync . RWMutex m map [ string ] int }{ m : make ( map [ string ] int )} \u8bfb counter \u524d\uff0c\u83b7\u53d6\u8bfb\u9501\uff1a counter . RLock () n := counter . m [ some_key ] counter . RUnlock () fmt . Println ( some_key: , n ) \u5199counter\u524d\uff0c\u83b7\u53d6\u5199\u9501 counter . Lock () counter . m [ some_key ] ++ counter . Unlock () \u5bf9\u5e94\u4e0e**sync.Map**\u7684\u4f7f\u7528\u63a5\u53e3\u793a\u4f8b\uff1a package RegularIntMap type RegularIntMap struct { sync . RWMutex internal map [ int ] int } func NewRegularIntMap () * RegularIntMap { return RegularIntMap { internal : make ( map [ int ] int ), } } func ( rm * RegularIntMap ) Load ( key int ) ( value int , ok bool ) { rm . RLock () result , ok := rm . internal [ key ] rm . RUnlock () return result , ok } func ( rm * RegularIntMap ) Delete ( key int ) { rm . Lock () delete ( rm . internal , key ) rm . Unlock () } func ( rm * RegularIntMap ) Store ( key , value int ) { rm . Lock () rm . internal [ key ] = value rm . Unlock () }","title":"map\u5e76\u53d1"},{"location":"go\u77e5\u8bc6\u70b9/go-map/#syncmap","text":"\u4ecego1.9\u5f00\u59cb\uff0csync.Map\u63d0\u4f9b\u7ed9\u5927\u5bb6\u4f7f\u7528\uff0c\u7ebf\u6027\u5b89\u5168\u7684map\u64cd\u4f5c\u3002 // \u8bf4\u660e\uff1a \u5b58\u50a8\u4e00\u4e2a\u8bbe\u7f6e\u7684\u952e\u503c\u3002 Store ( key , value interface {}) // \u8bf4\u660e\uff1a \u8fd4\u56de\u952e\u7684\u73b0\u6709\u503c(\u5982\u679c\u5b58\u5728)\uff0c\u5426\u5219\u5b58\u50a8\u5e76\u8fd4\u56de\u7ed9\u5b9a\u7684\u503c\uff0c\u5982\u679c\u662f\u8bfb\u53d6\u5219\u8fd4\u56detrue\uff0c\u5982\u679c\u662f\u5b58\u50a8\u8fd4\u56defalse\u3002 LoadOrStore ( key , value interface {}) ( actual interface {}, loaded bool ) // \u8bf4\u660e\uff1a \u8bfb\u53d6\u5b58\u50a8\u5728map\u4e2d\u7684\u503c\uff0c\u5982\u679c\u6ca1\u6709\u503c\uff0c\u5219\u8fd4\u56denil\u3002OK\u7684\u7ed3\u679c\u8868\u793a\u662f\u5426\u5728map\u4e2d\u627e\u5230\u503c\u3002 Load ( key interface {}) ( value interface {}, ok bool ) // \u8bf4\u660e\uff1a \u5220\u9664\u952e\u5bf9\u5e94\u7684\u503c\u3002 Delete ( key interface {}) // \u8bf4\u660e\uff1a \u5faa\u73af\u8bfb\u53d6map\u4e2d\u7684\u503c\u3002 Range ( f func ( key , value interface {}) bool ) \u56e0\u4e3a for ... range map \u662f\u5185\u5efa\u7684\u8bed\u8a00\u7279\u6027\uff0c\u6240\u4ee5\u6ca1\u6709\u529e\u6cd5\u4f7f\u7528 for range \u904d\u5386 sync.Map , \u4f46\u662f\u53ef\u4ee5\u4f7f\u7528\u5b83\u7684**Range**\u65b9\u6cd5\uff0c\u901a\u8fc7\u56de\u8c03\u7684\u65b9\u5f0f\u904d\u5386\u3002 \u793a\u4f8b\u4ee3\u7801\uff1a type userInfo struct { Name string Age int } var m sync . Map func main () { vv , ok := m . LoadOrStore ( 1 , one ) fmt . Println ( vv , ok ) //one false vv , ok = m . Load ( 1 ) fmt . Println ( vv , ok ) //one true vv , ok = m . LoadOrStore ( 1 , oneone ) fmt . Println ( vv , ok ) //one true vv , ok = m . Load ( 1 ) fmt . Println ( vv , ok ) //one true m . Store ( 1 , oneone ) vv , ok = m . Load ( 1 ) fmt . Println ( vv , ok ) // oneone true m . Store ( 2 , two ) m . Range ( func ( k , v interface {}) bool { fmt . Println ( k , v ) return true }) m . Delete ( 1 ) m . Range ( func ( k , v interface {}) bool { fmt . Println ( k , v ) return true }) map1 := make ( map [ string ] userInfo ) var user1 userInfo user1 . Name = ChamPly user1 . Age = 24 map1 [ user1 ] = user1 var user2 userInfo user2 . Name = Tom user2 . Age = 18 m . Store ( map_test , map1 ) mapValue , _ := m . Load ( map_test ) for k , v := range mapValue .( interface {}).( map [ string ] userInfo ) { fmt . Println ( k , v ) fmt . Println ( name: , v . Name ) } }","title":"sync.Map\u4f7f\u7528"},{"location":"go\u77e5\u8bc6\u70b9/go-map/#_2","text":"\u4ee3\u7801\u7ed3\u6784\uff1a ~/coding/go/sync-map-analysis . \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 README.md \u251c\u2500\u2500 bench_test.go \u251c\u2500\u2500 main.go \u2514\u2500\u2500 regular.go regular.go package main import ( sync ) type RegularStringMap struct { sync . RWMutex internal map [ string ] string } func NewRegularStringMap () * RegularStringMap { return RegularStringMap { internal : make ( map [ string ] string ), } } func ( rm * RegularStringMap ) Load ( key string ) ( value string , ok bool ) { rm . RLock () result , ok := rm . internal [ key ] rm . RUnlock () return result , ok } func ( rm * RegularStringMap ) Delete ( key string ) { rm . Lock () delete ( rm . internal , key ) rm . Unlock () } func ( rm * RegularStringMap ) Store ( key , value string ) { rm . Lock () rm . internal [ key ] = value rm . Unlock () } type RegularIntMap struct { sync . RWMutex internal map [ int ] int } func NewRegularIntMap () * RegularIntMap { return RegularIntMap { internal : make ( map [ int ] int ), } } func ( rm * RegularIntMap ) Load ( key int ) ( value int , ok bool ) { rm . RLock () result , ok := rm . internal [ key ] rm . RUnlock () return result , ok } func ( rm * RegularIntMap ) Delete ( key int ) { rm . Lock () delete ( rm . internal , key ) rm . Unlock () } func ( rm * RegularIntMap ) Store ( key , value int ) { rm . Lock () rm . internal [ key ] = value rm . Unlock () } main.go package main import ( fmt sync ) func main () { regularMapUsage () syncMapUsage () } func regularMapUsage () { fmt . Println ( Regular threatsafe map test ) fmt . Println ( --------------------------- ) // Create the threadsafe map. reg := NewRegularStringMap () // Fetch an item that doesn t exist yet. result , ok := reg . Load ( hello ) if ok { fmt . Println ( result ) } else { fmt . Println ( value not found for key: `hello` ) } // Store an item in the map. reg . Store ( hello , world ) fmt . Println ( added value: `world` for key: `hello` ) // Fetch the item we just stored. result , ok = reg . Load ( hello ) if ok { fmt . Printf ( result: `%s` found for key: `hello`\\n , result ) } fmt . Println ( --------------------------- ) fmt . Println () fmt . Println () } func syncMapUsage () { fmt . Println ( sync.Map test (Go 1.9+ only) ) fmt . Println ( ---------------------------- ) // Create the threadsafe map. var sm sync . Map // Fetch an item that doesn t exist yet. result , ok := sm . Load ( hello ) if ok { fmt . Println ( result ) } else { fmt . Println ( value not found for key: `hello` ) } // Store an item in the map. sm . Store ( hello , world ) fmt . Println ( added value: `world` for key: `hello` ) // Fetch the item we just stored. result , ok = sm . Load ( hello ) if ok { fmt . Printf ( result: `%s` found for key: `hello`\\n , result .( string )) } fmt . Println ( --------------------------- ) }","title":"\u6027\u80fd\u6d4b\u8bd5"},{"location":"go\u77e5\u8bc6\u70b9/go-map/#_3","text":"go\u590d\u5408\u6570\u636e\u7ed3\u6784\u4e4bmap map \u67e5 map\u5e76\u53d1 sync.Map Golang\u4e4bv1.9\u4e2d\u7ebf\u7a0b\u5b89\u5168\u7684sync.Map sync.Map \u4e0e map RWMutex \u6027\u80fd\u6d4b\u8bd5\u793a\u4f8b\u4ee3\u7801 github","title":"\u53c2\u8003\u6587\u732e"},{"location":"go\u77e5\u8bc6\u70b9/go-select\u4f7f\u7528\u8bef\u533a/","text":"select\u76f8\u5173\u77e5\u8bc6 select\u662fGo\u4e2d\u7684\u4e00\u4e2a\u63a7\u5236\u7ed3\u6784\uff0c\u7c7b\u4f3c\u4e8e\u7528\u4e8e\u901a\u4fe1\u7684switch\u8bed\u53e5\u3002\u6bcf\u4e2acase\u5fc5\u987b\u662f\u4e00\u4e2a\u901a\u4fe1\u64cd\u4f5c\uff0c\u8981\u4e48\u662f\u53d1\u9001\u8981\u4e48\u662f\u63a5\u6536\u3002 select\u968f\u673a\u6267\u884c\u4e00\u4e2a\u53ef\u8fd0\u884c\u7684case\u3002\u5982\u679c\u6ca1\u6709case\u53ef\u8fd0\u884c\uff0c\u5b83\u5c06\u963b\u585e\uff0c\u76f4\u5230\u6709case\u53ef\u8fd0\u884c\u3002\u4e00\u4e2a\u9ed8\u8ba4\u7684\u5b50\u53e5\u5e94\u8be5\u603b\u662f\u53ef\u8fd0\u884c\u7684\u3002 select\u8bed\u6cd5 Go \u7f16\u7a0b\u8bed\u8a00\u4e2d select \u8bed\u53e5\u7684\u8bed\u6cd5\u5982\u4e0b\uff1a select { case communication clause : statement ( s ); case communication clause : statement ( s ); /* \u4f60\u53ef\u4ee5\u5b9a\u4e49\u4efb\u610f\u6570\u91cf\u7684 case */ default : /* \u53ef\u9009 */ statement ( s ); } \u4ee5\u4e0b\u63cf\u8ff0\u4e86 select \u8bed\u53e5\u7684\u8bed\u6cd5\uff1a \u6bcf\u4e2acase\u90fd\u5fc5\u987b\u662f\u4e00\u4e2a\u901a\u4fe1 \u6240\u6709channel\u8868\u8fbe\u5f0f\u90fd\u4f1a\u88ab\u6c42\u503c \u6240\u6709\u88ab\u53d1\u9001\u7684\u8868\u8fbe\u5f0f\u90fd\u4f1a\u88ab\u6c42\u503c \u5982\u679c\u4efb\u610f\u67d0\u4e2a\u901a\u4fe1\u53ef\u4ee5\u8fdb\u884c\uff0c\u5b83\u5c31\u6267\u884c\uff1b\u5176\u4ed6\u88ab\u5ffd\u7565\u3002 \u5982\u679c\u6709\u591a\u4e2acase\u90fd\u53ef\u4ee5\u8fd0\u884c\uff0cSelect\u4f1a\u968f\u673a \u516c\u5e73 \u5730\u9009\u51fa\u4e00\u4e2a\u6267\u884c\u3002\u5176\u4ed6\u4e0d\u4f1a\u6267\u884c\u3002 \u5426\u5219\uff1a \u5982\u679c\u6709default\u5b50\u53e5\uff0c\u5219\u6267\u884c\u8be5\u8bed\u53e5\u3002 \u5982\u679c\u6ca1\u6709default\u5b57\u53e5\uff0cselect\u5c06\u963b\u585e\uff0c\u76f4\u5230\u67d0\u4e2a\u901a\u4fe1\u53ef\u4ee5\u8fd0\u884c\uff1bGo\u4e0d\u4f1a\u91cd\u65b0\u5bf9channel\u6216\u503c\u8fdb\u884c\u6c42\u503c\u3002 \u793a\u4f8b\uff1a package main import fmt func main () { var c1 , c2 , c3 chan int var i1 , i2 int select { case i1 = - c1 : fmt . Printf ( received , i1 , from c1\\n ) case c2 - i2 : fmt . Printf ( sent , i2 , to c2\\n ) case i3 , ok := ( - c3 ): // same as: i3, ok := -c3 if ok { fmt . Printf ( received , i3 , from c3\\n ) } else { fmt . Printf ( c3 is closed\\n ) } default : fmt . Printf ( no communication\\n ) } } \u4ee5\u4e0a\u4ee3\u7801\u6267\u884c\u7ed3\u679c\u4e3a\uff1a no communication \u95ee\u9898\u590d\u73b0 package main import ( fmt time ) func add ( ch chan int ) { for i := 0 ; i 10 ; i ++ { ch - i } } // timeout problem recurrent func test2 () { ch := make ( chan int , 10 ) go add ( ch ) for { select { case - time . After ( 2 * time . Second ): fmt . Println ( timeout ) return case t := - ch : fmt . Println ( t ) // if ch not empty, time.After will nerver exec fmt . Println ( sleep one seconds ... ) time . Sleep ( 1 * time . Second ) fmt . Println ( sleep one seconds end... ) } } } \u6839\u636e\u6761\u4ef65\uff1a\u5982\u679c\u6709\u591a\u4e2acase\u90fd\u53ef\u4ee5\u8fd0\u884c\uff0cSelect\u4f1a\u968f\u673a\u516c\u5e73\u5730\u9009\u51fa\u4e00\u4e2a\u6267\u884c\u3002\u5176\u4ed6\u4e0d\u4f1a\u6267\u884c\u3002 \u4f46\u662f\u8fd0\u884c\u4e0a\u8ff0\u4ee3\u7801\uff0c\u5f53ch\u901a\u9053\u4e2d\u5b58\u5728\u6570\u636e\u65f6\uff0c time.After \u603b\u662f\u5f97\u4e0d\u5230\u8fd0\u884c\uff0c\u56e0\u6b64\u5230\u65f6\u8d85\u65f6\u672a\u751f\u6548\uff08\u5c31\u50cf\u662f\u4e24\u4e2acase\u90fd\u6210\u7acb\u65f6\uff0cselect \u90fd\"\u516c\u5e73\"\u5730\u9009\u62e9\u4e86 case - ch \uff0c\u5bfc\u81f4\u8d85\u65f6\u903b\u8f91\u672a\u751f\u6548\uff09 \u6539\u8fdb1 func test3 () { ticker := time . NewTicker ( 2 * time . Second ) defer ticker . Stop () ch := make ( chan int , 10 ) go add ( ch ) for { select { case t := - ch : fmt . Println ( t ) // if ch not empty, time.After will nerver exec fmt . Println ( sleep one seconds ... ) time . Sleep ( 1 * time . Second ) fmt . Println ( sleep one seconds end... ) case - ticker . C : fmt . Println ( timeout ) return default : } } } \u6539\u8fdb1 \u968f\u673a\u6027\u5931\u8d25 \u5f53 case - ch \u548c case - ticker.C \u540c\u65f6\u6210\u7acb\u65f6\uff0c**Select**\u4f1a\u968f\u673a\u516c\u5e73\u5730\u9009\u51fa\u4e00\u4e2a\u6267\u884c\uff0c\u6709\u53ef\u80fd\u9009\u62e9\u5230\u524d\u8005\uff0c\u5bfc\u81f4\u8d85\u65f6\u968f\u673a\u884c\u5931\u8d25 \u6700\u7ec8\u89e3\u51b3\u65b9\u5f0f // final solution func test4 () { ticker := time . NewTicker ( 2 * time . Second ) defer ticker . Stop () ch := make ( chan int , 10 ) go add ( ch ) for { select { case t := - ch : fmt . Println ( ch ) // if ch not empty, time.After will nerver exec fmt . Println ( sleep one seconds ... ) time . Sleep ( 1 * time . Second ) fmt . Println ( sleep one seconds end... ) default : // forbid block } select { case - ticker . C : fmt . Println ( timeout ) return default : // forbid block } } } \u4e00\u5b9a\u8981\u8bb0\u5f97\u6bcf\u4e2a select \u540e\u9762\u52a0\u4e0a default \u8bed\u53e5\u3002 \u5c06\u3010\u8d85\u65f6\u3011\u548c\u3010\u6536\u5305\u3011\u653e\u5728**\u5404\u81ea\u5355\u72ec**\u7684select\u91cc\u9762\uff0c\u3010\u8d85\u65f6\u3011\u4e00\u5b9a\u53ef\u4ee5\u6267\u884c\u5230. \u53e6\u7f51\u4e0a\u4e00\u4e2a\u573a\u666f \u4e0a\u5468\u672b\u53c2\u52a0Go\u6280\u672f\u805a\u4f1a\uff0c\u4eac\u4e1c\u7684\u7f8e\u5973\u5de5\u7a0b\u5e08\u8bb2\u5230\u4e00\u4e2a select-case \u548c time.Ticker \u7684\u4f7f\u7528\u6ce8\u610f\u4e8b\u9879\uff08\u771f\u5b9e\u7684\u5e94\u7528\u573a\u666f\u662f:\u5728\u6d4b\u8bd5\u6536\u5305\u7684\u987a\u5e8f\u7684\u65f6\u5019\uff0c\u52a0\u4e86\u4e2atick\u5c31\u53d1\u73b0\u4e22\u5305\u4e86\uff09\uff0c\u89c9\u5f97\u5f88\u6709\u610f\u601d\uff0c\u8bb0\u5f55\u4e00\u4e0b\u3002 package main import ( fmt runtime time ) func init () { runtime . GOMAXPROCS ( runtime . NumCPU ()) } func main () { ch := make ( chan int , 1024 ) go func ( ch chan int ) { for { val := - ch fmt . Printf ( val:%d\\n , val ) } }( ch ) tick := time . NewTicker ( 1 * time . Second ) for i := 0 ; i 20 ; i ++ { select { case ch - i : case - tick . C : fmt . Printf ( %d: case -tick.C\\n , i ) } time . Sleep ( 200 * time . Millisecond ) } close ( ch ) tick . Stop () } \u8f93\u51fa\u5982\u4e0b: val:0 val:1 val:2 val:3 val:4 val:5 6 : case -tick.C val:7 val:8 val:9 10 : case -tick.C val:11 val:12 val:13 val:14 15 : case -tick.C val:16 val:17 val:18 val:19 \u95ee\u9898\u51fa\u5728\u8fd9\u4e2a select \u91cc\u9762\uff1a select { case ch - i : case - tick . C : fmt . Printf ( %d: case -tick.C\\n , i ) } \u5f53\u4e24\u4e2acase\u6761\u4ef6\u90fd\u6ee1\u8db3\u7684\u65f6\u5019\uff0c\u8fd0\u884c\u65f6\u7cfb\u7edf\u4f1a\u901a\u8fc7\u4e00\u4e2a\u4f2a\u968f\u673a\u7684\u7b97\u6cd5\u51b3\u5b9a\u54ea\u4e2acase\u5c06\u4f1a\u88ab\u6267\u884c \u6240\u4ee5\u5f53 tick.C \u6761\u4ef6\u6ee1\u8db3\u7684\u90a3\u4e2a\u5faa\u73af\uff0c\u6709\u67d0\u79cd\u6982\u7387\u9020\u6210 ch -i \u6ca1\u6709\u53d1\u9001(\u867d\u7136\u901a\u9053\u4e24\u7aef\u6ca1\u6709\u963b\u585e\uff0c\u6ee1\u8db3\u53d1\u9001\u6761\u4ef6) \u89e3\u51b3\u65b9\u68481: \u4e00\u65e6 tick.C \u968f\u673a\u7684case\u88ab\u968f\u673a\u5230\uff0c\u5c31\u591a\u6267\u884c\u4e00\u6b21 ch -i (\u4e0d\u4f53\u9762\uff0c\u5982\u679c\u6709\u591a\u4e2acase\u5c31\u4e0d\u901a\u7528\u4e86) select { case ch - i : case - tick . C : fmt . Printf ( %d: case -tick.C\\n , i ) ch - i } \u89e3\u51b3\u65b9\u68482: \u5c06 tick.C \u7684case\u5355\u72ec\u653e\u5230\u4e00\u4e2a select \u91cc\u9762\uff0c\u5e76\u52a0\u5165\u4e00\u4e2a default \uff08\u4fdd\u8bc1\u4e0d\u963b\u585e\uff09 select { case ch - i : } select { case - tick . C : fmt . Printf ( %d: case -tick.C\\n , i ) default : } \u4e24\u79cd\u89e3\u51b3\u65b9\u6848\u7684\u8f93\u51fa\u90fd\u662f\u5e0c\u671b\u7684\u7ed3\u679c\uff1a val:0 val:1 val:2 val:3 val:4 5 : case -tick.C val:5 val:6 val:7 val:8 val:9 10 : case -tick.C val:10 val:11 val:12 val:13 val:14 15 : case -tick.C val:15 val:16 val:17 val:18 val:19 \u53c2\u8003\u6587\u732e select\u6b63\u89e3\u59ff\u52bf select\u8bef\u533a","title":"go-select\u4f7f\u7528\u8bef\u533a"},{"location":"go\u77e5\u8bc6\u70b9/go-select\u4f7f\u7528\u8bef\u533a/#select","text":"select\u662fGo\u4e2d\u7684\u4e00\u4e2a\u63a7\u5236\u7ed3\u6784\uff0c\u7c7b\u4f3c\u4e8e\u7528\u4e8e\u901a\u4fe1\u7684switch\u8bed\u53e5\u3002\u6bcf\u4e2acase\u5fc5\u987b\u662f\u4e00\u4e2a\u901a\u4fe1\u64cd\u4f5c\uff0c\u8981\u4e48\u662f\u53d1\u9001\u8981\u4e48\u662f\u63a5\u6536\u3002 select\u968f\u673a\u6267\u884c\u4e00\u4e2a\u53ef\u8fd0\u884c\u7684case\u3002\u5982\u679c\u6ca1\u6709case\u53ef\u8fd0\u884c\uff0c\u5b83\u5c06\u963b\u585e\uff0c\u76f4\u5230\u6709case\u53ef\u8fd0\u884c\u3002\u4e00\u4e2a\u9ed8\u8ba4\u7684\u5b50\u53e5\u5e94\u8be5\u603b\u662f\u53ef\u8fd0\u884c\u7684\u3002","title":"select\u76f8\u5173\u77e5\u8bc6"},{"location":"go\u77e5\u8bc6\u70b9/go-select\u4f7f\u7528\u8bef\u533a/#select_1","text":"Go \u7f16\u7a0b\u8bed\u8a00\u4e2d select \u8bed\u53e5\u7684\u8bed\u6cd5\u5982\u4e0b\uff1a select { case communication clause : statement ( s ); case communication clause : statement ( s ); /* \u4f60\u53ef\u4ee5\u5b9a\u4e49\u4efb\u610f\u6570\u91cf\u7684 case */ default : /* \u53ef\u9009 */ statement ( s ); } \u4ee5\u4e0b\u63cf\u8ff0\u4e86 select \u8bed\u53e5\u7684\u8bed\u6cd5\uff1a \u6bcf\u4e2acase\u90fd\u5fc5\u987b\u662f\u4e00\u4e2a\u901a\u4fe1 \u6240\u6709channel\u8868\u8fbe\u5f0f\u90fd\u4f1a\u88ab\u6c42\u503c \u6240\u6709\u88ab\u53d1\u9001\u7684\u8868\u8fbe\u5f0f\u90fd\u4f1a\u88ab\u6c42\u503c \u5982\u679c\u4efb\u610f\u67d0\u4e2a\u901a\u4fe1\u53ef\u4ee5\u8fdb\u884c\uff0c\u5b83\u5c31\u6267\u884c\uff1b\u5176\u4ed6\u88ab\u5ffd\u7565\u3002 \u5982\u679c\u6709\u591a\u4e2acase\u90fd\u53ef\u4ee5\u8fd0\u884c\uff0cSelect\u4f1a\u968f\u673a \u516c\u5e73 \u5730\u9009\u51fa\u4e00\u4e2a\u6267\u884c\u3002\u5176\u4ed6\u4e0d\u4f1a\u6267\u884c\u3002 \u5426\u5219\uff1a \u5982\u679c\u6709default\u5b50\u53e5\uff0c\u5219\u6267\u884c\u8be5\u8bed\u53e5\u3002 \u5982\u679c\u6ca1\u6709default\u5b57\u53e5\uff0cselect\u5c06\u963b\u585e\uff0c\u76f4\u5230\u67d0\u4e2a\u901a\u4fe1\u53ef\u4ee5\u8fd0\u884c\uff1bGo\u4e0d\u4f1a\u91cd\u65b0\u5bf9channel\u6216\u503c\u8fdb\u884c\u6c42\u503c\u3002 \u793a\u4f8b\uff1a package main import fmt func main () { var c1 , c2 , c3 chan int var i1 , i2 int select { case i1 = - c1 : fmt . Printf ( received , i1 , from c1\\n ) case c2 - i2 : fmt . Printf ( sent , i2 , to c2\\n ) case i3 , ok := ( - c3 ): // same as: i3, ok := -c3 if ok { fmt . Printf ( received , i3 , from c3\\n ) } else { fmt . Printf ( c3 is closed\\n ) } default : fmt . Printf ( no communication\\n ) } } \u4ee5\u4e0a\u4ee3\u7801\u6267\u884c\u7ed3\u679c\u4e3a\uff1a no communication","title":"select\u8bed\u6cd5"},{"location":"go\u77e5\u8bc6\u70b9/go-select\u4f7f\u7528\u8bef\u533a/#_1","text":"package main import ( fmt time ) func add ( ch chan int ) { for i := 0 ; i 10 ; i ++ { ch - i } } // timeout problem recurrent func test2 () { ch := make ( chan int , 10 ) go add ( ch ) for { select { case - time . After ( 2 * time . Second ): fmt . Println ( timeout ) return case t := - ch : fmt . Println ( t ) // if ch not empty, time.After will nerver exec fmt . Println ( sleep one seconds ... ) time . Sleep ( 1 * time . Second ) fmt . Println ( sleep one seconds end... ) } } } \u6839\u636e\u6761\u4ef65\uff1a\u5982\u679c\u6709\u591a\u4e2acase\u90fd\u53ef\u4ee5\u8fd0\u884c\uff0cSelect\u4f1a\u968f\u673a\u516c\u5e73\u5730\u9009\u51fa\u4e00\u4e2a\u6267\u884c\u3002\u5176\u4ed6\u4e0d\u4f1a\u6267\u884c\u3002 \u4f46\u662f\u8fd0\u884c\u4e0a\u8ff0\u4ee3\u7801\uff0c\u5f53ch\u901a\u9053\u4e2d\u5b58\u5728\u6570\u636e\u65f6\uff0c time.After \u603b\u662f\u5f97\u4e0d\u5230\u8fd0\u884c\uff0c\u56e0\u6b64\u5230\u65f6\u8d85\u65f6\u672a\u751f\u6548\uff08\u5c31\u50cf\u662f\u4e24\u4e2acase\u90fd\u6210\u7acb\u65f6\uff0cselect \u90fd\"\u516c\u5e73\"\u5730\u9009\u62e9\u4e86 case - ch \uff0c\u5bfc\u81f4\u8d85\u65f6\u903b\u8f91\u672a\u751f\u6548\uff09","title":"\u95ee\u9898\u590d\u73b0"},{"location":"go\u77e5\u8bc6\u70b9/go-select\u4f7f\u7528\u8bef\u533a/#1","text":"func test3 () { ticker := time . NewTicker ( 2 * time . Second ) defer ticker . Stop () ch := make ( chan int , 10 ) go add ( ch ) for { select { case t := - ch : fmt . Println ( t ) // if ch not empty, time.After will nerver exec fmt . Println ( sleep one seconds ... ) time . Sleep ( 1 * time . Second ) fmt . Println ( sleep one seconds end... ) case - ticker . C : fmt . Println ( timeout ) return default : } } } \u6539\u8fdb1 \u968f\u673a\u6027\u5931\u8d25 \u5f53 case - ch \u548c case - ticker.C \u540c\u65f6\u6210\u7acb\u65f6\uff0c**Select**\u4f1a\u968f\u673a\u516c\u5e73\u5730\u9009\u51fa\u4e00\u4e2a\u6267\u884c\uff0c\u6709\u53ef\u80fd\u9009\u62e9\u5230\u524d\u8005\uff0c\u5bfc\u81f4\u8d85\u65f6\u968f\u673a\u884c\u5931\u8d25","title":"\u6539\u8fdb1"},{"location":"go\u77e5\u8bc6\u70b9/go-select\u4f7f\u7528\u8bef\u533a/#_2","text":"// final solution func test4 () { ticker := time . NewTicker ( 2 * time . Second ) defer ticker . Stop () ch := make ( chan int , 10 ) go add ( ch ) for { select { case t := - ch : fmt . Println ( ch ) // if ch not empty, time.After will nerver exec fmt . Println ( sleep one seconds ... ) time . Sleep ( 1 * time . Second ) fmt . Println ( sleep one seconds end... ) default : // forbid block } select { case - ticker . C : fmt . Println ( timeout ) return default : // forbid block } } } \u4e00\u5b9a\u8981\u8bb0\u5f97\u6bcf\u4e2a select \u540e\u9762\u52a0\u4e0a default \u8bed\u53e5\u3002 \u5c06\u3010\u8d85\u65f6\u3011\u548c\u3010\u6536\u5305\u3011\u653e\u5728**\u5404\u81ea\u5355\u72ec**\u7684select\u91cc\u9762\uff0c\u3010\u8d85\u65f6\u3011\u4e00\u5b9a\u53ef\u4ee5\u6267\u884c\u5230.","title":"\u6700\u7ec8\u89e3\u51b3\u65b9\u5f0f"},{"location":"go\u77e5\u8bc6\u70b9/go-select\u4f7f\u7528\u8bef\u533a/#_3","text":"\u4e0a\u5468\u672b\u53c2\u52a0Go\u6280\u672f\u805a\u4f1a\uff0c\u4eac\u4e1c\u7684\u7f8e\u5973\u5de5\u7a0b\u5e08\u8bb2\u5230\u4e00\u4e2a select-case \u548c time.Ticker \u7684\u4f7f\u7528\u6ce8\u610f\u4e8b\u9879\uff08\u771f\u5b9e\u7684\u5e94\u7528\u573a\u666f\u662f:\u5728\u6d4b\u8bd5\u6536\u5305\u7684\u987a\u5e8f\u7684\u65f6\u5019\uff0c\u52a0\u4e86\u4e2atick\u5c31\u53d1\u73b0\u4e22\u5305\u4e86\uff09\uff0c\u89c9\u5f97\u5f88\u6709\u610f\u601d\uff0c\u8bb0\u5f55\u4e00\u4e0b\u3002 package main import ( fmt runtime time ) func init () { runtime . GOMAXPROCS ( runtime . NumCPU ()) } func main () { ch := make ( chan int , 1024 ) go func ( ch chan int ) { for { val := - ch fmt . Printf ( val:%d\\n , val ) } }( ch ) tick := time . NewTicker ( 1 * time . Second ) for i := 0 ; i 20 ; i ++ { select { case ch - i : case - tick . C : fmt . Printf ( %d: case -tick.C\\n , i ) } time . Sleep ( 200 * time . Millisecond ) } close ( ch ) tick . Stop () } \u8f93\u51fa\u5982\u4e0b: val:0 val:1 val:2 val:3 val:4 val:5 6 : case -tick.C val:7 val:8 val:9 10 : case -tick.C val:11 val:12 val:13 val:14 15 : case -tick.C val:16 val:17 val:18 val:19 \u95ee\u9898\u51fa\u5728\u8fd9\u4e2a select \u91cc\u9762\uff1a select { case ch - i : case - tick . C : fmt . Printf ( %d: case -tick.C\\n , i ) } \u5f53\u4e24\u4e2acase\u6761\u4ef6\u90fd\u6ee1\u8db3\u7684\u65f6\u5019\uff0c\u8fd0\u884c\u65f6\u7cfb\u7edf\u4f1a\u901a\u8fc7\u4e00\u4e2a\u4f2a\u968f\u673a\u7684\u7b97\u6cd5\u51b3\u5b9a\u54ea\u4e2acase\u5c06\u4f1a\u88ab\u6267\u884c \u6240\u4ee5\u5f53 tick.C \u6761\u4ef6\u6ee1\u8db3\u7684\u90a3\u4e2a\u5faa\u73af\uff0c\u6709\u67d0\u79cd\u6982\u7387\u9020\u6210 ch -i \u6ca1\u6709\u53d1\u9001(\u867d\u7136\u901a\u9053\u4e24\u7aef\u6ca1\u6709\u963b\u585e\uff0c\u6ee1\u8db3\u53d1\u9001\u6761\u4ef6) \u89e3\u51b3\u65b9\u68481: \u4e00\u65e6 tick.C \u968f\u673a\u7684case\u88ab\u968f\u673a\u5230\uff0c\u5c31\u591a\u6267\u884c\u4e00\u6b21 ch -i (\u4e0d\u4f53\u9762\uff0c\u5982\u679c\u6709\u591a\u4e2acase\u5c31\u4e0d\u901a\u7528\u4e86) select { case ch - i : case - tick . C : fmt . Printf ( %d: case -tick.C\\n , i ) ch - i } \u89e3\u51b3\u65b9\u68482: \u5c06 tick.C \u7684case\u5355\u72ec\u653e\u5230\u4e00\u4e2a select \u91cc\u9762\uff0c\u5e76\u52a0\u5165\u4e00\u4e2a default \uff08\u4fdd\u8bc1\u4e0d\u963b\u585e\uff09 select { case ch - i : } select { case - tick . C : fmt . Printf ( %d: case -tick.C\\n , i ) default : } \u4e24\u79cd\u89e3\u51b3\u65b9\u6848\u7684\u8f93\u51fa\u90fd\u662f\u5e0c\u671b\u7684\u7ed3\u679c\uff1a val:0 val:1 val:2 val:3 val:4 5 : case -tick.C val:5 val:6 val:7 val:8 val:9 10 : case -tick.C val:10 val:11 val:12 val:13 val:14 15 : case -tick.C val:15 val:16 val:17 val:18 val:19","title":"\u53e6\u7f51\u4e0a\u4e00\u4e2a\u573a\u666f"},{"location":"go\u77e5\u8bc6\u70b9/go-select\u4f7f\u7528\u8bef\u533a/#_4","text":"select\u6b63\u89e3\u59ff\u52bf select\u8bef\u533a","title":"\u53c2\u8003\u6587\u732e"},{"location":"go\u77e5\u8bc6\u70b9/jetbrain\u5bb6\u65cfgoland-pycharm-webstorm\u914d\u7f6e/","text":"jetbrains\u5bb6\u65cf\u5de5\u5177\u4ecb\u7ecd pycharm \u662f\u6211\u7528\u5f97\u6bd4\u8f83\u591a\u7684 go ide . \u56e0\u4e3a\u6709\u65f6\u5019\u8981\u5199 python , \u60f3\u4e00\u4e2aide\u641e\u5b9a\u3002\u4f46\u662f\u6700\u8fd1 go1.10 \u51fa\u6765\u4e4b\u540e\uff0c pycharm \u4e0d\u652f\u6301\u3002\u800c**goland**\u7ec8\u4e8e\u51fa\u4e86\u4e00\u4e2a\u8bd5\u7528\u7248\u672c\u3002\u7528\u4e86\u4e00\u4e0b\u5f88\u597d\u7528\u3002\u4e8e\u662f\u8bb0\u5f55\u4e00\u4e0b\u4f7f\u7528\u7684\u4e00\u4e9b\u5feb\u6377\u952e\u3002 \u66f4\u65b0\uff1a \u8fd9\u91cc\u9762\u5305\u62ec\u4e86 JetBrains \u5bb6\u65cf\u91cc\u9762\u7684\u6240\u6709IDEA\u914d\u7f6e\u3002\u5305\u62ecpycharm, goland, webstorm, ide\u7b49\u6240\u6709\u90fd\u53ef\u4ee5\u901a\u7528\u3002\u9700\u8981\u5b89\u88c5gototabs\u63d2\u4ef6\u3002 pycharm \u4fee\u6539\u952e\u76d8\u4e60\u60ef KeyMap\u9009\u62e9 Default copy , \u4e5f\u5c31\u662f\u5229\u7528 Default \u6765\u590d\u5236\u8fdb\u884c\u4fee\u6539\u6700\u65b9\u4fbf\uff1a \u7ec4\u5408\u952e \u4fee\u6539\u5185\u5bb9 ctrl+cmd+] Move Caret to Code Block End \u5220\u9664 Move Caret to Line End Commnad+Shift+F, Ctrl+\\, E Find in Path... Ctrl+\\, S Find Usages(\u7528\u6cd5) Command+E Recent Files Ctrl+Command+F Toggle Full Screen mode Ctrl+T, T Back Ctrl+] Declaration Command+[ Previous Method Command+R Run... Command+1 Go to TAb #1 Ctrl+, F Project Ctrl+, S Structure Ctrl+\\, T Search Everywhere Ctrl+Command+P Previous Occurrence \u5728Find Usage(\u67e5\u627e\u7528\u6cd5)\u5b50\u7a97\u53e3\u4e2d\uff0c\u4e0a\u4e00\u4e2a\u67e5\u627e\u70b9\u7684\u5feb\u6377\u952e Ctrl+Command+N Next Occurrence \u5728Find Usage(\u67e5\u627e\u4f7f\u7528)\u5b50\u7a97\u53e3\u4e2d\uff0c\u4e0b\u4e00\u4e2a\u67e5\u627e\u70b9\u7684\u5feb\u6377\u952e Shift+Esc \u8fd9\u4e2a\u952e\u4e0d\u7528\u6539\uff0c\u7cfb\u7edf\u9ed8\u8ba4\u7684\u3002\u9690\u85cfActive\u7a97\u53e3\u3002Hide Active tool Window Ctrl+X,3 \u8fd9\u4e2a\u952e\u4e0d\u7528\u6539\uff0c \u5927\u5c4f\u8fd9\u4e2a\u5782\u76f4\u5206\u5c4f\u7528\u5f97\u6bd4\u8f83\u591a\uff0c\u770b\u4ee3\u7801\u723d\u554a \u3002Split Vertically \u5782\u76f4\u5206\u5c4f Ctrl+X,2 \u8fd9\u4e2a\u952e\u4e0d\u7528\u6539\uff0cSplit Horizontally \u6c34\u5e73\u5206\u5c4f Ctrl+X,1 \u8fd9\u4e2a\u952e\u4e5f\u4e0d\u7528\u6539\uff0c\u53d6\u6d88\u6240\u6709\u5206\u5c4f\uff0cUnSplite All Ctrl+W, HJKL \u8fd9\u4e2a\u662fvim\u81ea\u5e26\u7684\u5feb\u6377\u952e\uff0c\u5206\u5c4f\u540e\u5c31\u53ef\u4ee5\u5728\u5404\u4e2a\u5c4f\u4e4b\u4e2d\u6765\u56de\u8df3\u8f6c\u4e86\u3002 /\\cinitchain \\c\u8868\u793aset ignorecase; \\C \u8868\u793asmartcase\u7684\u610f\u601d\u3002 Command+/ Comment Line \u5355\u884c\u6ce8\u91ca Ctrl+Shift+/ Block Comment \u5757\u6ce8\u91ca Ctrl+Option+Shift+P go fmt project \u683c\u5f0f\u5316\u6574\u4e2a\u9879\u76ee\u7684\u4ee3\u7801 Ctrl+Option+Shift+F go fmt file \u683c\u5f0f\u5316\u6587\u4ef6 Command+T open terminal, close terminal \u6253\u5f00\u7ec8\u7aef \u5b57\u4f53 Scheme: Atome one dark Font: Go Mono for Powerline Source Code for Powline size:15 Line Space:1.4 \u53d6\u6d88import\u4ee3\u7801\u6298\u53e0\u529f\u80fd\uff1a Editor- General- Code Folding- \u53d6\u6d88Imports\u524d\u9762\u7684\u52fe\u5373\u53ef \u5b57\u4f53\u6211\u4e00\u822c\u662f\u8fd9\u51e0\u79cd\u6362\u7740\u7528\uff1aCourier New, Monaco, Menlo, Source Code Pro \u81ea\u52a8\u8865\u5168 Settings Editor General Code Completion \u8bbe\u7f6e\u667a\u80fd\u63d0\u793a\u5927\u5c0f\u5199\u654f\u611f\u4e3a\"None\" \u81ea\u52a8\u6362\u884c Settins Editor General Soft Wraps \u6253\u5f00 Soft-warp files: \u589e\u52a0 *.md; *.go \u4ee3\u7801\u68c0\u6d4b \u5728ide\u9762\u677f\u4e0a\u70b9\u51fb\u53f3\u4e0b\u89d2\u50cf \u8001\u4eba\u5934 \u4f3c\u7684\u56fe\u6807\u8bbe\u7f6e\u3010\u4ee3\u7801\u68c0\u6d4b\u8b66\u544a\u63d0\u793a\u3011\u7b49\u7ea7\uff0c\u5efa\u8bae\u5f00\u542f Inspections \u68c0\u6d4b\u529f\u80fd\u3002 \u81ea\u52a8\u5bfc\u5165\u4ee5\u53caTab\u9875\u529f\u80fd Settings \u300bEditor \u300bGeneral \u300bAuto Import \u8bbe\u7f6e\u5305\u81ea\u52a8\u5bfc\u5165\u548c\u4f18\u5316\u5bfc\u5165 Settings \u300bEditor \u300bGeneral \u300bEditor Tabs \u8bbe\u7f6e\u6253\u5f00\u7684Tab\u9875\u591a\u884c\u663e\u793a\u53ca\u6253\u5f00\u7684Tab\u9875\u4e0a\u9650 import\u4ee5\u53ca\u6ce8\u91ca\u524d\u589e\u52a0\u7a7a\u683c\u529f\u80fd Settings \u300bEditor \u300bCode Style \u300bGo \u53f3\u4fa7Other\u6807\u7b7e\u9875\uff0c\u52fe\u9009Add leading space to comments pycharm\u8bbe\u7f6epython3 \u8f93\u5165interpreter\u91cc\u9762\u70b9\u53f3\u8fb9\u7684Project Interpreter\u8fdb\u884c\u8bbe\u7f6e\u3002 \u4ee3\u7406 plugin htpp... http proxy \u8bbe\u7f6ehttp localhost 1023 webstorm\u914d\u7f6e react Library \u7684\u652f\u6301: Languages Frameworks JavaScript Libraries Download \u8f93\u5165react \u627e\u5408\u9002\u7684\u4e0b\u8f7d\u3002 \u53e6\u5916\u8981\u60f3\u652f\u6301JSX\u7684\u8bdd\uff0c\u4e0d\u8981\u70b9Library\u4e86\uff0c\u76f4\u63a5\u70b9\u4ed6\u7684\u7236\u7c7bJavaScript\u4e4b\u540e\u5728\u53f3\u8fb9\u9009\u62e9**React JSX**\u5373\u53ef\u3002 \u7b80\u5355\u5b57\u7b26\u4e32\u67e5\u8be2 \u6211\u5e73\u65f6\u7528 vim \u6bd4\u8f83\u591a,\u6700\u7231vim\u7684\u5feb\u6377\u952e\u4e86\u3002\u6700\u559c\u6b22**/ \u5c31\u76f4\u63a5\u67e5\u627e\u4e86\u3002\u4f46\u662f\u9ed8\u8ba4\u662f\u5927\u5c0f\u5199\u654f\u611f\u7684\u3002\u5982\u679c\u60f3\u5ffd\u7565\u7684\u8bdd\uff0c\u9700\u8981\u8f93\u5165 \\c**\u624d\u80fd\u5ffd\u7565\u3002 /\\cinitchain \u5229\u7528 C- e (Find in Path...) \u67e5\u770binterface \u793a\u4f8b\uff1a interface { SignTx ( account Account , tx * types . Transaction , chainID * big . Int ) ( * types . Transaction , error ) } \u67e5\u8be2\u7528\uff1a // func ( ks * KeyStore ) SignTx ( a accounts . Account , tx * types . Transaction , chainID * big . Int ) ( * types . Transaction , error ) { ^ func \\ s .* SignTx \\ ( .* accounts . Account \u6b63\u5219\u4f7f\u7528\u7684 java \u7684\u6b63\u5219\uff1a regex \u4fee\u6539vmoptions \u4fee\u6539\u6587\u4ef6\uff1a vim /Applications/GoLand.app/Contents/bin/goland.vmoptions -Xms3g -Xmx3g -XX:ReservedCodeCacheSize=2g -XX:+UseCompressedOops -Dfile.encoding=UTF-8 -XX:+UseConcMarkSweepGC -XX:SoftRefLRUPolicyMSPerMB=50 -ea -Dsun.io.useCanonCaches=false -Djava.net.preferIPv4Stack=true -XX:+HeapDumpOnOutOfMemoryError -XX:-OmitStackTraceInFastThrow -Xverify:none -XX:ErrorFile=$USER_HOME/java_error_in_goland_%p.log -XX:HeapDumpPath=$USER_HOME/java_error_in_goland.hprof \u5173\u4e8e\u4e3b\u9898 \u5728GoLand\u4f7f\u7528\u4e86\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\u90fd\u6ca1\u6709\u4fee\u6539\u8fc7\u4e3b\u9898\u3002\u540e\u6765\u53d1\u73b0atom\u7684\u771f\u7684\u5f88\u6f02\u4eae\uff0c\u4e8e\u662f\u53c8\u5f00\u59cb\u6298\u817e\u4e3b\u9898\u642d\u914d\u4e86\u3002 - \u4e3b\u9898\u5728 plugin \u91cc\u9762\u641c Material Theme UI \u5b89\u88c5\u5373\u53ef\u3002\u975e\u5e38\u597d\u770b\u3002\u518d\u5728plugin\u91cc\u9762\u641c Rainglow Color Schemes \u5b89\u88c5\u3002 - \u6700\u540e\u5728 Color Scheme \u91cc\u9762\u9009\u62e9**Atom One Dark**\u5373\u53ef\u3002\u5b8c\u7f8e \u5173\u4e8e\u540c\u6b65 \u6211\u5728\u516c\u53f8\u6709\u4e2ambp, \u5728\u5bb6\u91cc\u4e5f\u6709\u4e2ambp, \u8fd9\u6837\u5c31\u4e0d\u7528\u6765\u56de\u80cc\u7535\u8111\u4e86\u3002\u8170\u75bc\u771f\u7684\u518d\u4e5f\u80cc\u4e0d\u52a8\u4e86\u3002\u4e8e\u662f\u9700\u8981\u540c\u6b65\u914d\u7f6e\u6587\u4ef6\u3002 JetBrains\u5bb6\u7684IDE\u6240\u6709\u914d\u7f6e\u90fd\u4e00\u6837\u3002 IDEA\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6\u5b58\u653e\u4f4d\u7f6e Windows \u4fdd\u5b58\u5728 C:/Users/username/.IntelliJIdeaXX (XX\u8868\u793a\u4ea7\u54c1\u7684\u7248\u672c\u53f7\uff0c\u5f53\u524d\u7248\u672c\u662f2018.2) Unix/Linux \u4fdd\u5b58\u5728 ~/.IntelliJIdeaXX (~ \u5c31\u662f/home/\u76ee\u5f55) Mac \u4fdd\u5b58\u5728 ~/Library/Preferences/IntelliJIdeaXX \u6253\u5f00IDEA\u5b89\u88c5\u76ee\u5f55C:/Program Files (x86)/JetBrains/IntelliJ IDEA 2016.2/bin/idea.properties\uff0c\u627e\u5230\u7b2c8\u884c\uff0c\u628aidea.config.path\u524d\u9762\u7684#\u53f7\u53bb\u6389\uff0c=\u53f7\u540e\u9762\u7684\u8def\u5f84\u4fee\u6539\u6210\u4e4b\u524d\u7684\u914d\u7f6e\u6587\u4ef6\u5939\u7684\u76ee\u5f55\uff0c\u4f8b\u5982IDEA\u4fee\u6539\u4e3aidea.config.path=E:/jianguoyun/IDEA/config\u3002\u8bb0\u5f97\u628a\u8def\u5f84\u4e2d\u7684\u201c\\\u201d\u6362\u6210\u201c/\u201d\u3002 \u542f\u52a8\u4e0d\u4e86 \u5982\u679c\u624b\u8d31\u4e71\u7834\u89e3\u5c31\u4f1a\u5bfc\u81f4\u50cf\u6211\u8fd9\u6837\u542f\u52a8\u4e0d\u4e86\uff0c\u90a3\u65f6\u5019\u53ea\u80fd\u91cd\u65b0\u6765\u8fc7\u4e86,\u5220\u9664\u4e0b\u9762\u914d\u7f6e\u6587\u4ef6\u5c31\u53ef\u4ee5\uff0c\u53e6\u5916\u6240\u6709JetBrains\u5bb6\u65cf\u7684\u8f6f\u4ef6\u90fd\u9002\u5408\u8fd9\u6837\uff1a rm -rf ~/Library/Preferences/GoLand* rm -rf ~/Library/Application \\ Support/GoLand* rm -rf ~/Library/Caches/GoLand* rm -rf ~/Library/Logs/GoLand* \u5229\u7528jar\u5305\u7834\u89e3\uff0c\u4e0d\u8981\u81ea\u642d\u670d\u52a1\u5668\u4e86\u3002 zhile\u535a\u5ba2\u91cc\u9762\u6709agent\u6587\u4ef6 \u8bf7\u770b\u6700\u4e0b\u9762\u7684\u53c2\u8003\u6587\u732e\u91cc\u9762\u7684\u5185\u5bb9\u3002 \u4f7f\u7528\u65b9\u6cd5: 0. \u5148\u4e0b\u8f7d\u538b\u7f29\u5305\u89e3\u538b\u540e\u5f97\u5230jetbrains-agent.jar\uff0c\u628a\u5b83\u653e\u5230\u4f60\u8ba4\u4e3a\u5408\u9002\u7684\u6587\u4ef6\u5939\u5185\u3002 \u4e0b\u8f7d\u5217\u8868\u5730\u5740\uff1a https://zhile.io/files/jetbrains-agent-v2018.2.2.zip 1. \u70b9\u51fb\u4f60\u8981\u6ce8\u518c\u7684IDE\u83dc\u5355\uff1a\"Configure|Help\" - \"Edit Custom VM Options ...\" \u5982\u679c\u63d0\u793a\u662f\u5426\u8981\u521b\u5efa\u6587\u4ef6\uff0c\u8bf7\u70b9\"\u662f|Yes\"\u3002 \u8def\u5f84\u5728: cat ~/Library/Preferences/GoLand2018.2/goland.vmoptions 2. \u5728\u6253\u5f00\u7684vmoptions\u7f16\u8f91\u7a97\u53e3\u672b\u884c\u6dfb\u52a0\uff1a\"-javaagent:/absolute/path/to/jetbrains-agent.jar\" \u4e00\u5b9a\u8981\u81ea\u5df1\u786e\u8ba4\u597d\u8def\u5f84\uff0c\u586b\u9519\u4f1a\u5bfc\u81f4IDE\u6253\u4e0d\u5f00\uff01\uff01\uff01\u6700\u597d\u4f7f\u7528\u7edd\u5bf9\u8def\u5f84\u3002 \u5982: -javaagent:/Users/liwei/Documents/jetbrains-agent.jar 3. \u91cd\u542f\u4f60\u7684IDE\u3002 4. \u6ce8\u518c\u9009\u62e9License server\u65b9\u5f0f\uff0c\u5730\u5740\u586b\u5165\uff1a http://[\u968f\u610f\u586b\u4e00\u4e2a\u57df\u540d\uff08\u53ef\u80e1\u7f16\u4e71\u9020\uff09\uff0c\u8981\u6c42\u6b63\u597d\u6b63\u597d\u6b63\u597d16\u4e2a\u5b57\u7b26\uff08\u4e0d\u8981\u6709:'/', '[', ']'\uff09] \u4f8b\u5982\uff1a http://1234567890ab.com 5. \u5982\u679c\u63d0\u793a\u9519\u8bef: \"Error opening zip file or JAR manifest missing : jetbrains-agent.jar\" \u8fd9\u79cd\u60c5\u51b5\u8bf7\u8bd5\u7740\u586b\u4e0ajar\u6587\u4ef6\u7684\u7edd\u5bf9\u8def\u5f84. X. \u6216\u8005\u4f7f\u7528\u6587\u4ef6\uff1aACTIVATION_CODE.txt \u5185\u7684\u6ce8\u518c\u7801\u6fc0\u6d3b\u3002 \u5982\u679c\u4f60\u9700\u8981\u81ea\u5b9a\u4e49License name\uff0c\u8bf7\u52a0\u7fa4\u544a\u77e5\u3002 # \u81ea\u5efaLicense Server\u670d\u52a1\u5668 Self deploy license server - docker run -d --net=host --restart=always --name jetbrains -p 1212:1212 jbtools/jb - Use Link http://{localhost or ip}:1212 \u5199\u4e2adocker-compose\u542f\u52a8\u5373\u53ef version : 2 services : jetbrains : image : jbtools/jb container_name : jetbrains ports : - 1212:1212 restart : always networks : jetbrains_net : ipv4_address : 172.16.244.2 networks : jetbrains_net : driver : bridge ipam : driver : default config : - subnet : 172.16.244.0/24 \u53c2\u8003\u6587\u732e select\u6b63\u89e3\u59ff\u52bf select\u8bef\u533a vmoptions colour-schemes \u5229\u7528jar\u5305\u6fc0\u6d3bjetbrains-agent.tar \u6ce8\u518c\u6fc0\u6d3b\u6b65\u9aa4","title":"jetbrains"},{"location":"go\u77e5\u8bc6\u70b9/jetbrain\u5bb6\u65cfgoland-pycharm-webstorm\u914d\u7f6e/#jetbrains","text":"pycharm \u662f\u6211\u7528\u5f97\u6bd4\u8f83\u591a\u7684 go ide . \u56e0\u4e3a\u6709\u65f6\u5019\u8981\u5199 python , \u60f3\u4e00\u4e2aide\u641e\u5b9a\u3002\u4f46\u662f\u6700\u8fd1 go1.10 \u51fa\u6765\u4e4b\u540e\uff0c pycharm \u4e0d\u652f\u6301\u3002\u800c**goland**\u7ec8\u4e8e\u51fa\u4e86\u4e00\u4e2a\u8bd5\u7528\u7248\u672c\u3002\u7528\u4e86\u4e00\u4e0b\u5f88\u597d\u7528\u3002\u4e8e\u662f\u8bb0\u5f55\u4e00\u4e0b\u4f7f\u7528\u7684\u4e00\u4e9b\u5feb\u6377\u952e\u3002 \u66f4\u65b0\uff1a \u8fd9\u91cc\u9762\u5305\u62ec\u4e86 JetBrains \u5bb6\u65cf\u91cc\u9762\u7684\u6240\u6709IDEA\u914d\u7f6e\u3002\u5305\u62ecpycharm, goland, webstorm, ide\u7b49\u6240\u6709\u90fd\u53ef\u4ee5\u901a\u7528\u3002\u9700\u8981\u5b89\u88c5gototabs\u63d2\u4ef6\u3002","title":"jetbrains\u5bb6\u65cf\u5de5\u5177\u4ecb\u7ecd"},{"location":"go\u77e5\u8bc6\u70b9/jetbrain\u5bb6\u65cfgoland-pycharm-webstorm\u914d\u7f6e/#pycharm","text":"KeyMap\u9009\u62e9 Default copy , \u4e5f\u5c31\u662f\u5229\u7528 Default \u6765\u590d\u5236\u8fdb\u884c\u4fee\u6539\u6700\u65b9\u4fbf\uff1a \u7ec4\u5408\u952e \u4fee\u6539\u5185\u5bb9 ctrl+cmd+] Move Caret to Code Block End \u5220\u9664 Move Caret to Line End Commnad+Shift+F, Ctrl+\\, E Find in Path... Ctrl+\\, S Find Usages(\u7528\u6cd5) Command+E Recent Files Ctrl+Command+F Toggle Full Screen mode Ctrl+T, T Back Ctrl+] Declaration Command+[ Previous Method Command+R Run... Command+1 Go to TAb #1 Ctrl+, F Project Ctrl+, S Structure Ctrl+\\, T Search Everywhere Ctrl+Command+P Previous Occurrence \u5728Find Usage(\u67e5\u627e\u7528\u6cd5)\u5b50\u7a97\u53e3\u4e2d\uff0c\u4e0a\u4e00\u4e2a\u67e5\u627e\u70b9\u7684\u5feb\u6377\u952e Ctrl+Command+N Next Occurrence \u5728Find Usage(\u67e5\u627e\u4f7f\u7528)\u5b50\u7a97\u53e3\u4e2d\uff0c\u4e0b\u4e00\u4e2a\u67e5\u627e\u70b9\u7684\u5feb\u6377\u952e Shift+Esc \u8fd9\u4e2a\u952e\u4e0d\u7528\u6539\uff0c\u7cfb\u7edf\u9ed8\u8ba4\u7684\u3002\u9690\u85cfActive\u7a97\u53e3\u3002Hide Active tool Window Ctrl+X,3 \u8fd9\u4e2a\u952e\u4e0d\u7528\u6539\uff0c \u5927\u5c4f\u8fd9\u4e2a\u5782\u76f4\u5206\u5c4f\u7528\u5f97\u6bd4\u8f83\u591a\uff0c\u770b\u4ee3\u7801\u723d\u554a \u3002Split Vertically \u5782\u76f4\u5206\u5c4f Ctrl+X,2 \u8fd9\u4e2a\u952e\u4e0d\u7528\u6539\uff0cSplit Horizontally \u6c34\u5e73\u5206\u5c4f Ctrl+X,1 \u8fd9\u4e2a\u952e\u4e5f\u4e0d\u7528\u6539\uff0c\u53d6\u6d88\u6240\u6709\u5206\u5c4f\uff0cUnSplite All Ctrl+W, HJKL \u8fd9\u4e2a\u662fvim\u81ea\u5e26\u7684\u5feb\u6377\u952e\uff0c\u5206\u5c4f\u540e\u5c31\u53ef\u4ee5\u5728\u5404\u4e2a\u5c4f\u4e4b\u4e2d\u6765\u56de\u8df3\u8f6c\u4e86\u3002 /\\cinitchain \\c\u8868\u793aset ignorecase; \\C \u8868\u793asmartcase\u7684\u610f\u601d\u3002 Command+/ Comment Line \u5355\u884c\u6ce8\u91ca Ctrl+Shift+/ Block Comment \u5757\u6ce8\u91ca Ctrl+Option+Shift+P go fmt project \u683c\u5f0f\u5316\u6574\u4e2a\u9879\u76ee\u7684\u4ee3\u7801 Ctrl+Option+Shift+F go fmt file \u683c\u5f0f\u5316\u6587\u4ef6 Command+T open terminal, close terminal \u6253\u5f00\u7ec8\u7aef","title":"pycharm \u4fee\u6539\u952e\u76d8\u4e60\u60ef"},{"location":"go\u77e5\u8bc6\u70b9/jetbrain\u5bb6\u65cfgoland-pycharm-webstorm\u914d\u7f6e/#_1","text":"Scheme: Atome one dark Font: Go Mono for Powerline Source Code for Powline size:15 Line Space:1.4 \u53d6\u6d88import\u4ee3\u7801\u6298\u53e0\u529f\u80fd\uff1a Editor- General- Code Folding- \u53d6\u6d88Imports\u524d\u9762\u7684\u52fe\u5373\u53ef \u5b57\u4f53\u6211\u4e00\u822c\u662f\u8fd9\u51e0\u79cd\u6362\u7740\u7528\uff1aCourier New, Monaco, Menlo, Source Code Pro","title":"\u5b57\u4f53"},{"location":"go\u77e5\u8bc6\u70b9/jetbrain\u5bb6\u65cfgoland-pycharm-webstorm\u914d\u7f6e/#_2","text":"Settings Editor General Code Completion \u8bbe\u7f6e\u667a\u80fd\u63d0\u793a\u5927\u5c0f\u5199\u654f\u611f\u4e3a\"None\"","title":"\u81ea\u52a8\u8865\u5168"},{"location":"go\u77e5\u8bc6\u70b9/jetbrain\u5bb6\u65cfgoland-pycharm-webstorm\u914d\u7f6e/#_3","text":"Settins Editor General Soft Wraps \u6253\u5f00 Soft-warp files: \u589e\u52a0 *.md; *.go","title":"\u81ea\u52a8\u6362\u884c"},{"location":"go\u77e5\u8bc6\u70b9/jetbrain\u5bb6\u65cfgoland-pycharm-webstorm\u914d\u7f6e/#_4","text":"\u5728ide\u9762\u677f\u4e0a\u70b9\u51fb\u53f3\u4e0b\u89d2\u50cf \u8001\u4eba\u5934 \u4f3c\u7684\u56fe\u6807\u8bbe\u7f6e\u3010\u4ee3\u7801\u68c0\u6d4b\u8b66\u544a\u63d0\u793a\u3011\u7b49\u7ea7\uff0c\u5efa\u8bae\u5f00\u542f Inspections \u68c0\u6d4b\u529f\u80fd\u3002","title":"\u4ee3\u7801\u68c0\u6d4b"},{"location":"go\u77e5\u8bc6\u70b9/jetbrain\u5bb6\u65cfgoland-pycharm-webstorm\u914d\u7f6e/#tab","text":"Settings \u300bEditor \u300bGeneral \u300bAuto Import \u8bbe\u7f6e\u5305\u81ea\u52a8\u5bfc\u5165\u548c\u4f18\u5316\u5bfc\u5165 Settings \u300bEditor \u300bGeneral \u300bEditor Tabs \u8bbe\u7f6e\u6253\u5f00\u7684Tab\u9875\u591a\u884c\u663e\u793a\u53ca\u6253\u5f00\u7684Tab\u9875\u4e0a\u9650","title":"\u81ea\u52a8\u5bfc\u5165\u4ee5\u53caTab\u9875\u529f\u80fd"},{"location":"go\u77e5\u8bc6\u70b9/jetbrain\u5bb6\u65cfgoland-pycharm-webstorm\u914d\u7f6e/#import","text":"Settings \u300bEditor \u300bCode Style \u300bGo \u53f3\u4fa7Other\u6807\u7b7e\u9875\uff0c\u52fe\u9009Add leading space to comments","title":"import\u4ee5\u53ca\u6ce8\u91ca\u524d\u589e\u52a0\u7a7a\u683c\u529f\u80fd"},{"location":"go\u77e5\u8bc6\u70b9/jetbrain\u5bb6\u65cfgoland-pycharm-webstorm\u914d\u7f6e/#pycharmpython3","text":"\u8f93\u5165interpreter\u91cc\u9762\u70b9\u53f3\u8fb9\u7684Project Interpreter\u8fdb\u884c\u8bbe\u7f6e\u3002","title":"pycharm\u8bbe\u7f6epython3"},{"location":"go\u77e5\u8bc6\u70b9/jetbrain\u5bb6\u65cfgoland-pycharm-webstorm\u914d\u7f6e/#_5","text":"plugin htpp... http proxy \u8bbe\u7f6ehttp localhost 1023","title":"\u4ee3\u7406"},{"location":"go\u77e5\u8bc6\u70b9/jetbrain\u5bb6\u65cfgoland-pycharm-webstorm\u914d\u7f6e/#webstorm","text":"react Library \u7684\u652f\u6301: Languages Frameworks JavaScript Libraries Download \u8f93\u5165react \u627e\u5408\u9002\u7684\u4e0b\u8f7d\u3002 \u53e6\u5916\u8981\u60f3\u652f\u6301JSX\u7684\u8bdd\uff0c\u4e0d\u8981\u70b9Library\u4e86\uff0c\u76f4\u63a5\u70b9\u4ed6\u7684\u7236\u7c7bJavaScript\u4e4b\u540e\u5728\u53f3\u8fb9\u9009\u62e9**React JSX**\u5373\u53ef\u3002","title":"webstorm\u914d\u7f6e"},{"location":"go\u77e5\u8bc6\u70b9/jetbrain\u5bb6\u65cfgoland-pycharm-webstorm\u914d\u7f6e/#_6","text":"\u6211\u5e73\u65f6\u7528 vim \u6bd4\u8f83\u591a,\u6700\u7231vim\u7684\u5feb\u6377\u952e\u4e86\u3002\u6700\u559c\u6b22**/ \u5c31\u76f4\u63a5\u67e5\u627e\u4e86\u3002\u4f46\u662f\u9ed8\u8ba4\u662f\u5927\u5c0f\u5199\u654f\u611f\u7684\u3002\u5982\u679c\u60f3\u5ffd\u7565\u7684\u8bdd\uff0c\u9700\u8981\u8f93\u5165 \\c**\u624d\u80fd\u5ffd\u7565\u3002 /\\cinitchain","title":"\u7b80\u5355\u5b57\u7b26\u4e32\u67e5\u8be2"},{"location":"go\u77e5\u8bc6\u70b9/jetbrain\u5bb6\u65cfgoland-pycharm-webstorm\u914d\u7f6e/#c-32e-find-in-path-interface","text":"\u793a\u4f8b\uff1a interface { SignTx ( account Account , tx * types . Transaction , chainID * big . Int ) ( * types . Transaction , error ) } \u67e5\u8be2\u7528\uff1a // func ( ks * KeyStore ) SignTx ( a accounts . Account , tx * types . Transaction , chainID * big . Int ) ( * types . Transaction , error ) { ^ func \\ s .* SignTx \\ ( .* accounts . Account \u6b63\u5219\u4f7f\u7528\u7684 java \u7684\u6b63\u5219\uff1a regex","title":"\u5229\u7528 C- e (Find in Path...) \u67e5\u770binterface"},{"location":"go\u77e5\u8bc6\u70b9/jetbrain\u5bb6\u65cfgoland-pycharm-webstorm\u914d\u7f6e/#vmoptions","text":"\u4fee\u6539\u6587\u4ef6\uff1a vim /Applications/GoLand.app/Contents/bin/goland.vmoptions -Xms3g -Xmx3g -XX:ReservedCodeCacheSize=2g -XX:+UseCompressedOops -Dfile.encoding=UTF-8 -XX:+UseConcMarkSweepGC -XX:SoftRefLRUPolicyMSPerMB=50 -ea -Dsun.io.useCanonCaches=false -Djava.net.preferIPv4Stack=true -XX:+HeapDumpOnOutOfMemoryError -XX:-OmitStackTraceInFastThrow -Xverify:none -XX:ErrorFile=$USER_HOME/java_error_in_goland_%p.log -XX:HeapDumpPath=$USER_HOME/java_error_in_goland.hprof","title":"\u4fee\u6539vmoptions"},{"location":"go\u77e5\u8bc6\u70b9/jetbrain\u5bb6\u65cfgoland-pycharm-webstorm\u914d\u7f6e/#_7","text":"\u5728GoLand\u4f7f\u7528\u4e86\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\u90fd\u6ca1\u6709\u4fee\u6539\u8fc7\u4e3b\u9898\u3002\u540e\u6765\u53d1\u73b0atom\u7684\u771f\u7684\u5f88\u6f02\u4eae\uff0c\u4e8e\u662f\u53c8\u5f00\u59cb\u6298\u817e\u4e3b\u9898\u642d\u914d\u4e86\u3002 - \u4e3b\u9898\u5728 plugin \u91cc\u9762\u641c Material Theme UI \u5b89\u88c5\u5373\u53ef\u3002\u975e\u5e38\u597d\u770b\u3002\u518d\u5728plugin\u91cc\u9762\u641c Rainglow Color Schemes \u5b89\u88c5\u3002 - \u6700\u540e\u5728 Color Scheme \u91cc\u9762\u9009\u62e9**Atom One Dark**\u5373\u53ef\u3002\u5b8c\u7f8e","title":"\u5173\u4e8e\u4e3b\u9898"},{"location":"go\u77e5\u8bc6\u70b9/jetbrain\u5bb6\u65cfgoland-pycharm-webstorm\u914d\u7f6e/#_8","text":"\u6211\u5728\u516c\u53f8\u6709\u4e2ambp, \u5728\u5bb6\u91cc\u4e5f\u6709\u4e2ambp, \u8fd9\u6837\u5c31\u4e0d\u7528\u6765\u56de\u80cc\u7535\u8111\u4e86\u3002\u8170\u75bc\u771f\u7684\u518d\u4e5f\u80cc\u4e0d\u52a8\u4e86\u3002\u4e8e\u662f\u9700\u8981\u540c\u6b65\u914d\u7f6e\u6587\u4ef6\u3002 JetBrains\u5bb6\u7684IDE\u6240\u6709\u914d\u7f6e\u90fd\u4e00\u6837\u3002 IDEA\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6\u5b58\u653e\u4f4d\u7f6e Windows \u4fdd\u5b58\u5728 C:/Users/username/.IntelliJIdeaXX (XX\u8868\u793a\u4ea7\u54c1\u7684\u7248\u672c\u53f7\uff0c\u5f53\u524d\u7248\u672c\u662f2018.2) Unix/Linux \u4fdd\u5b58\u5728 ~/.IntelliJIdeaXX (~ \u5c31\u662f/home/\u76ee\u5f55) Mac \u4fdd\u5b58\u5728 ~/Library/Preferences/IntelliJIdeaXX \u6253\u5f00IDEA\u5b89\u88c5\u76ee\u5f55C:/Program Files (x86)/JetBrains/IntelliJ IDEA 2016.2/bin/idea.properties\uff0c\u627e\u5230\u7b2c8\u884c\uff0c\u628aidea.config.path\u524d\u9762\u7684#\u53f7\u53bb\u6389\uff0c=\u53f7\u540e\u9762\u7684\u8def\u5f84\u4fee\u6539\u6210\u4e4b\u524d\u7684\u914d\u7f6e\u6587\u4ef6\u5939\u7684\u76ee\u5f55\uff0c\u4f8b\u5982IDEA\u4fee\u6539\u4e3aidea.config.path=E:/jianguoyun/IDEA/config\u3002\u8bb0\u5f97\u628a\u8def\u5f84\u4e2d\u7684\u201c\\\u201d\u6362\u6210\u201c/\u201d\u3002","title":"\u5173\u4e8e\u540c\u6b65"},{"location":"go\u77e5\u8bc6\u70b9/jetbrain\u5bb6\u65cfgoland-pycharm-webstorm\u914d\u7f6e/#_9","text":"\u5982\u679c\u624b\u8d31\u4e71\u7834\u89e3\u5c31\u4f1a\u5bfc\u81f4\u50cf\u6211\u8fd9\u6837\u542f\u52a8\u4e0d\u4e86\uff0c\u90a3\u65f6\u5019\u53ea\u80fd\u91cd\u65b0\u6765\u8fc7\u4e86,\u5220\u9664\u4e0b\u9762\u914d\u7f6e\u6587\u4ef6\u5c31\u53ef\u4ee5\uff0c\u53e6\u5916\u6240\u6709JetBrains\u5bb6\u65cf\u7684\u8f6f\u4ef6\u90fd\u9002\u5408\u8fd9\u6837\uff1a rm -rf ~/Library/Preferences/GoLand* rm -rf ~/Library/Application \\ Support/GoLand* rm -rf ~/Library/Caches/GoLand* rm -rf ~/Library/Logs/GoLand*","title":"\u542f\u52a8\u4e0d\u4e86"},{"location":"go\u77e5\u8bc6\u70b9/jetbrain\u5bb6\u65cfgoland-pycharm-webstorm\u914d\u7f6e/#jar","text":"zhile\u535a\u5ba2\u91cc\u9762\u6709agent\u6587\u4ef6 \u8bf7\u770b\u6700\u4e0b\u9762\u7684\u53c2\u8003\u6587\u732e\u91cc\u9762\u7684\u5185\u5bb9\u3002 \u4f7f\u7528\u65b9\u6cd5: 0. \u5148\u4e0b\u8f7d\u538b\u7f29\u5305\u89e3\u538b\u540e\u5f97\u5230jetbrains-agent.jar\uff0c\u628a\u5b83\u653e\u5230\u4f60\u8ba4\u4e3a\u5408\u9002\u7684\u6587\u4ef6\u5939\u5185\u3002 \u4e0b\u8f7d\u5217\u8868\u5730\u5740\uff1a https://zhile.io/files/jetbrains-agent-v2018.2.2.zip 1. \u70b9\u51fb\u4f60\u8981\u6ce8\u518c\u7684IDE\u83dc\u5355\uff1a\"Configure|Help\" - \"Edit Custom VM Options ...\" \u5982\u679c\u63d0\u793a\u662f\u5426\u8981\u521b\u5efa\u6587\u4ef6\uff0c\u8bf7\u70b9\"\u662f|Yes\"\u3002 \u8def\u5f84\u5728: cat ~/Library/Preferences/GoLand2018.2/goland.vmoptions 2. \u5728\u6253\u5f00\u7684vmoptions\u7f16\u8f91\u7a97\u53e3\u672b\u884c\u6dfb\u52a0\uff1a\"-javaagent:/absolute/path/to/jetbrains-agent.jar\" \u4e00\u5b9a\u8981\u81ea\u5df1\u786e\u8ba4\u597d\u8def\u5f84\uff0c\u586b\u9519\u4f1a\u5bfc\u81f4IDE\u6253\u4e0d\u5f00\uff01\uff01\uff01\u6700\u597d\u4f7f\u7528\u7edd\u5bf9\u8def\u5f84\u3002 \u5982: -javaagent:/Users/liwei/Documents/jetbrains-agent.jar 3. \u91cd\u542f\u4f60\u7684IDE\u3002 4. \u6ce8\u518c\u9009\u62e9License server\u65b9\u5f0f\uff0c\u5730\u5740\u586b\u5165\uff1a http://[\u968f\u610f\u586b\u4e00\u4e2a\u57df\u540d\uff08\u53ef\u80e1\u7f16\u4e71\u9020\uff09\uff0c\u8981\u6c42\u6b63\u597d\u6b63\u597d\u6b63\u597d16\u4e2a\u5b57\u7b26\uff08\u4e0d\u8981\u6709:'/', '[', ']'\uff09] \u4f8b\u5982\uff1a http://1234567890ab.com 5. \u5982\u679c\u63d0\u793a\u9519\u8bef: \"Error opening zip file or JAR manifest missing : jetbrains-agent.jar\" \u8fd9\u79cd\u60c5\u51b5\u8bf7\u8bd5\u7740\u586b\u4e0ajar\u6587\u4ef6\u7684\u7edd\u5bf9\u8def\u5f84. X. \u6216\u8005\u4f7f\u7528\u6587\u4ef6\uff1aACTIVATION_CODE.txt \u5185\u7684\u6ce8\u518c\u7801\u6fc0\u6d3b\u3002 \u5982\u679c\u4f60\u9700\u8981\u81ea\u5b9a\u4e49License name\uff0c\u8bf7\u52a0\u7fa4\u544a\u77e5\u3002 # \u81ea\u5efaLicense Server\u670d\u52a1\u5668 Self deploy license server - docker run -d --net=host --restart=always --name jetbrains -p 1212:1212 jbtools/jb - Use Link http://{localhost or ip}:1212 \u5199\u4e2adocker-compose\u542f\u52a8\u5373\u53ef version : 2 services : jetbrains : image : jbtools/jb container_name : jetbrains ports : - 1212:1212 restart : always networks : jetbrains_net : ipv4_address : 172.16.244.2 networks : jetbrains_net : driver : bridge ipam : driver : default config : - subnet : 172.16.244.0/24","title":"\u5229\u7528jar\u5305\u7834\u89e3\uff0c\u4e0d\u8981\u81ea\u642d\u670d\u52a1\u5668\u4e86\u3002"},{"location":"go\u77e5\u8bc6\u70b9/jetbrain\u5bb6\u65cfgoland-pycharm-webstorm\u914d\u7f6e/#_10","text":"select\u6b63\u89e3\u59ff\u52bf select\u8bef\u533a vmoptions colour-schemes \u5229\u7528jar\u5305\u6fc0\u6d3bjetbrains-agent.tar \u6ce8\u518c\u6fc0\u6d3b\u6b65\u9aa4","title":"\u53c2\u8003\u6587\u732e"},{"location":"os\u7cfb\u7edf\u76f8\u5173/mkdocs\u914d\u7f6e\u8bb0\u5f55/","text":"mkdocs\u914d\u7f6e\u5907\u5fd8 \u8fd9\u91cc\u9762\u8bb0\u5f55\u4e00\u4e0bmkdocs\u7684\u4e00\u4e9b\u914d\u7f6e\u7528\u4ee5\u5907\u5fd8\u3002 \u53c2\u8003\u7f51\u5740 \u5b98\u7f51\u6587\u6863 \u4e2d\u6587\u7684\u6709\u5173\u4e3b\u9898\u7684\u4e00\u4e9b\u914d\u7f6e \u5907\u5fd8 !!! note !!! info !!! abstract !!! tip !!! success !!! question !!! warning !!! failure !!! dange #! \u5728\u5355\u884c\u53ef\u4ee5\u4f7f\u7528 \u652f\u6301434\u79cd\u683c\u5f0f codehilite\u662f\u57fa\u4e8epygments\u5b9e\u73b0\u9ad8\u4eae\u7684\uff0c\u652f\u6301434\u79cd\u683c\u5f0f\uff0c\u8be6\u89c1 \u652f\u6301\u4ee3\u7801\u9ad8\u4eae\u7684\u8bed\u8a00 \u82e5\u6307\u5b9a\u4e86\u4e0d\u5b58\u5728\u7684\u683c\u5f0f\uff0c\u5219\u7b49\u540c\u4e8etext\uff0c\u4e0d\u505a\u4efb\u4f55\u9ad8\u4eae\u6e32\u67d3","title":"mkdocs\u914d\u7f6e\u5907\u5fd8"},{"location":"os\u7cfb\u7edf\u76f8\u5173/mkdocs\u914d\u7f6e\u8bb0\u5f55/#mkdocs","text":"\u8fd9\u91cc\u9762\u8bb0\u5f55\u4e00\u4e0bmkdocs\u7684\u4e00\u4e9b\u914d\u7f6e\u7528\u4ee5\u5907\u5fd8\u3002","title":"mkdocs\u914d\u7f6e\u5907\u5fd8"},{"location":"os\u7cfb\u7edf\u76f8\u5173/mkdocs\u914d\u7f6e\u8bb0\u5f55/#_1","text":"\u5b98\u7f51\u6587\u6863 \u4e2d\u6587\u7684\u6709\u5173\u4e3b\u9898\u7684\u4e00\u4e9b\u914d\u7f6e","title":"\u53c2\u8003\u7f51\u5740"},{"location":"os\u7cfb\u7edf\u76f8\u5173/mkdocs\u914d\u7f6e\u8bb0\u5f55/#_2","text":"!!! note !!! info !!! abstract !!! tip !!! success !!! question !!! warning !!! failure !!! dange #! \u5728\u5355\u884c\u53ef\u4ee5\u4f7f\u7528 \u652f\u6301434\u79cd\u683c\u5f0f codehilite\u662f\u57fa\u4e8epygments\u5b9e\u73b0\u9ad8\u4eae\u7684\uff0c\u652f\u6301434\u79cd\u683c\u5f0f\uff0c\u8be6\u89c1 \u652f\u6301\u4ee3\u7801\u9ad8\u4eae\u7684\u8bed\u8a00 \u82e5\u6307\u5b9a\u4e86\u4e0d\u5b58\u5728\u7684\u683c\u5f0f\uff0c\u5219\u7b49\u540c\u4e8etext\uff0c\u4e0d\u505a\u4efb\u4f55\u9ad8\u4eae\u6e32\u67d3","title":"\u5907\u5fd8"}]}